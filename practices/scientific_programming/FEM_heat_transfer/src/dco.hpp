// dco/c++ version: v3.1.4
// git hash: 0e123ad000e13e513aecbe0d0e3e3851357a7e72
// branch: master
 
// ================================================================ //
// *** This is a generated file from above given source version *** //
// ================================================================ //
#ifndef DCO_HPP
#define DCO_HPP

#ifdef _MSC_VER
#pragma warning( push )
#pragma warning( disable : 4512 )
#pragma warning( disable : 4503 )
#pragma warning( disable: 4127 )
#endif


// this file is either directly included in dco.hpp or added in front
// of the resulting dco.hpp generated by preprocessor
#ifndef DCO_GLOBAL_INCLUDES
#define DCO_GLOBAL_INCLUDES

#include <sstream>
#include <cmath>
#include <vector>
#include <iostream>
#include <map>
#include <fstream>
#include <complex>
#include <string>
#include <stack>
#include <exception>
#include <stdexcept>
#include <string>
#include <bitset>
#include <cstdarg>
#include <cstdlib>
#include <cstdio>
#include <string.h>

#include <cassert>
#include <limits>
#include <iomanip>

#if !defined(_WIN32) & !defined(__APPLE__)
#include <sys/mman.h>
#include <sys/time.h>
#endif
#if !defined(_WIN32)
#include <unistd.h>
#endif

// for stce::timer
#if !defined(DCO_DOXYGEN) & defined(_WIN32)
#  include <windows.h>
#  undef min
#  undef max
#endif

#include <fcntl.h>
#include <typeinfo>

#ifdef DCO_OPENMP
#  include <omp.h>
#endif

// define all DEPRECATED, to generate compiler-warnings,
// if a marked function is instantiated
// (only implemented for gnu compiler and visual C++)
#ifdef __GNUC__
#define DEPRECATED __attribute__((deprecated))
#elif defined(_MSC_VER)
#define DEPRECATED __declspec(deprecated)
#else
// #pragma message("WARNING: You need to implement DEPRECATED for this compiler")
#define DEPRECATED
#endif
#ifndef DCO_T1V_SIZE
#define DCO_T1V_SIZE 5
#endif

#ifndef DCO_P1F_SIZE
#define DCO_P1F_SIZE 32
#endif
#ifndef DCO_CHUNK_SIZE
#define DCO_CHUNK_SIZE 1024*1024
#endif

#ifndef DCO_DEFAULT_TAPE_SIZE
#define DCO_DEFAULT_TAPE_SIZE 1024*1024*10
#endif

#endif
/**
 * \file
 * Header with dco's configuration definitions. Here the compilation flags will be processed which define how dco shall be compiled (features, constants, environment etc.).
 */

#ifndef DCO_DEFINES_SETUP_HPP
#define DCO_DEFINES_SETUP_HPP

// DCO_NO_DEFS:   if set, not even the basic functionality is included
// DCO_GA1S:      if set, dco::ga1s<...>::type exists (generic a1s)
// DCO_GA1V:      if set, dco::ga1v<...>::type exists (generic a1v)
// DCO_GA1SM:     if set, dco::ga1sm<...>::type exists (generic a1sm)
// DCO_GT1S:      if set, dco::gt1s<...>::type exists (generic t1s)
// DCO_GT1V:      if set, dco::gt1v<...>::type exists (generic t1v)
// DCO_PATTERN:   if set, dco::p1t::type and dco::p1f::type (pattern types)
// DCO_INSTRUMENT:              if set, dco::instrument:type (tape size info, call tree)
// DCO_TAPE_CALLBACKS: if set, tape::tape_callback_object_base (add adjoint wrapper)
// DCO_CHECK_BOUNDS:            if set, check bounds in each operation (esp. for blob tape)
// DCO_TAPE_ACTIVITY:           if set, tape is only written for active variables
// DCO_T1V_ACTIVITY:            if set, tangents are only propagated for active variables
// DCO_ALLOW_TAPE_SWITCH_OFF:   if set, tape->switch_to_passive / active enabled
// DCO_CHUNK_TAPE:              if set, chunk tape instead of blob tape used for adjoints
// DCO_MPI_TAPE:                if set, (NOT AVAILABLE YET)

// tweaks:
// DCO_TIMER:                               if set, dco::timer exists (also set, if DCO_DEBUG set)
// DCO_DISABLE_ASSIGN_OPTIMIZATION:         if set, each assignment in adjoint mode creates a new node in tape
// DCO_ENABLE_INT_OPERATOR:                 if set, there is an operator int() available (be carefull! also conversion from double possible then!)

// ==> DCO_NO_GLOBAL_INCLUDES
// there are two use-cases, where global includes should not exist:
//  - doxygen documentation generation
//  - preprocessor run to generate just one hpp-file
#ifdef DCO_DOXYGEN
#define DCO_NO_GLOBAL_INCLUDES
#endif

#ifdef DCO_TAPE_EXTERNAL_FUNCTIONS
#ifndef DCO_TAPE_CALLBACKS
#define DCO_TAPE_CALLBACKS
#endif
#endif

#ifdef _WIN32
#ifndef _MSC_VER
#define _MSC_VER
#endif
#endif

// ==> if define DCO_LICENSE:
//   - in header, only definition of a few functions (e.g. set/get, _interpret_chunk, ...)
//   - dco_license.cpp needs to be compiled and linked afterwards (.o has the excluded functions)
#ifdef DCO_LICENSE
#define DCO_LICENSE_EXCLUDE_SOURCE
#define DCO_LICENSE_INCLUDE_CHECK
#define DCOi_INLINEDEF
#else
#define DCOi_INLINEDEF inline
#endif

// default configuration for dco (DCO_DEFAULT)
#ifndef DCO_NO_DEFAULT
#define DCO_A1SM
#define DCO_T2S_A1SM
#define DCO_GA1SM
#define DCO_GT1S
#define DCO_GT1V
#define DCO_GA1S
#define DCO_GA1V
#define DCO_PATTERN
#define DCO_INSTRUMENT
#define DCO_TAPE_CALLBACKS
#define DCO_CHECK_BOUNDS
#define DCO_TAPE_ACTIVITY
/**
 * This definition enables the activity analysis for the first-order vector tangent type.
 * The usage of the analysis can lead to a better efficiency if many t1v program variables doesn't depend on any independents.
 * TODO: More detailed explanation...
 */
#define DCO_T1V_ACTIVITY
#define DCO_ALLOW_TAPE_SWITCH_OFF
#define DCO_CHUNK_TAPE
#define DCO_MPI_TAPE
#define DCO_LOGGING
#endif

// Instrumentation required the dco::timer!
#ifdef DCO_INSTRUMENT
# ifndef DCO_TIMER
#  define DCO_TIMER
# endif
#endif

// partially specializes the active_type class for t2s_t1s, t3s_t2s_t1s, ...
//  (workaround for annoying constructor problem -- see ticket #40 in trac)
#ifdef DCO_GT1S
#define DCO_PARTIAL_TEMPLATE_SPECIALIZATION
#endif

#ifndef DCO_TAPE_INT
typedef long int DCO_TAPE_INT;
#endif
//#define DCOi_BASE_TYPE std::complex<double>
#define DCOi_BASE_TYPE double
//#define DCOi_BASE_TYPE float

#ifdef DCO_CHECK_BOUNDS
#define DCO_TAPE_BOUNDS_CHECK
#endif

// this is only default -- in cpp, it is ommited: -DDCO_T1V_SIZE=DCO_T1V_SIZE
#ifndef DCO_T1V_SIZE
#define DCO_T1V_SIZE 5
#endif

// this is only default -- in cpp, it is ommited: -DDCO_P1F_SIZE=DCO_P1F_SIZE
#ifndef DCO_P1F_SIZE
#define DCO_P1F_SIZE 32
#endif

#ifdef DCO_COUNT_MODE
#ifdef DCO_CHUNK_TAPE
#undef DCO_CHUNK_TAPE
#endif
#endif

#ifdef DCO_DEBUG
# ifndef DCO_TAPE_BOUNDS_CHECK
#  define DCO_TAPE_BOUNDS_CHECK
# endif
# ifndef DCO_TIMER
#  define DCO_TIMER
# endif
#endif

#ifdef DCO_CHUNK_TAPE
// this is only default -- in cpp, it is ommited: -DDCO_CHUNK_SIZE=DCO_CHUNK_SIZE
# ifndef DCO_CHUNK_SIZE
#  define DCO_CHUNK_SIZE 1024*1024
# endif
#else
# ifndef DCO_DEFAULT_TAPE_SIZE
#  define DCO_DEFAULT_TAPE_SIZE 1024*1024
# endif
#endif

#ifdef DCO_T1V_ACTIVITY
//! The activity analysis (see \link DCO_T1V_ACTIVITY \endlink) is enabled per default.
#define DCOi_T1V_ACTIVITY_ANALYSIS_DEFAULT true
#else
#define DCOi_T1V_ACTIVITY_ANALYSIS_DEFAULT false
#endif


// in case no std-includes wanted (preprocessing or doxygen), certain
// defines are forced to be preserved (e.g. DCO_T1V_SIZE; see file)
#ifdef DCO_NO_GLOBAL_INCLUDES
#include "dco_preserve_defines.hpp"
#endif

#ifndef DCO_DEBUG
# define CHECK_OVERFLOW(x, a)
#else
# define CHECK_OVERFLOW(x, a) assert(x < static_cast<DCO_TAPE_INT>(std::numeric_limits<DCO_TAPE_INT>::max()-a))
#endif

#ifndef DCO_LOGGING
# ifdef FILELOG_MAX_LEVEL
#  undef FILELOG_MAX_LEVEL
# endif
# define FILELOG_MAX_LEVEL -1
#else
# ifndef DCO_TIMER
#  define DCO_TIMER
# endif
# ifndef FILELOG_MAX_LEVEL
#  define FILELOG_MAX_LEVEL dco::logDEBUG4
# endif
#endif

#endif
// included in dco_logging.hpp or in dco.hpp directly
namespace dco {

  inline std::string NowTime();

  enum log_level_enum {logERROR, logWARNING, logINFO, logDEBUG, logDEBUG1, logDEBUG2, logDEBUG3, logDEBUG4};

  template <typename LOGGER_STREAM>
  class log {
    std::string _file;
    int _line;
  public:
    log(std::string file, int line) : _file(file), _line(line) {}
    log() : _file(""), _line(-1) {}
    ~log() {
      if (_line == -1)
        os << std::endl;
      else
        os << " : " << _file << ":" << _line << std::endl;
      LOGGER_STREAM::output(os.str());
    }

    inline std::ostringstream &operator()(log_level_enum level = logINFO) {
      os << "- " << NowTime();
      os << " " << std::setw(7) << to_string(level) << ": ";
      os << std::string(level > logINFO ? level - logINFO : 0, '\t');
      return os;
    }

  public:
    /**
     * \implstatus10
     * \ingroup logging
     */
    static inline log_level_enum &reporting_level() {
      static log_level_enum reporting_level = logINFO;
      return reporting_level;
    }

    static inline std::string to_string(log_level_enum level) {
      static const char *const buffer[] = {"ERROR", "WARNING", "INFO", "DEBUG", "DEBUG1", "DEBUG2", "DEBUG3", "DEBUG4"};
      return buffer[level];
    }

    static inline log_level_enum from_string(const std::string &level) {
      if (level == "DEBUG4")  return logDEBUG4;
      if (level == "DEBUG3")  return logDEBUG3;
      if (level == "DEBUG2")  return logDEBUG2;
      if (level == "DEBUG1")  return logDEBUG1;
      if (level == "DEBUG")   return logDEBUG;
      if (level == "INFO")    return logINFO;
      if (level == "WARNING") return logWARNING;
      if (level == "ERROR")   return logERROR;
      log<LOGGER_STREAM>()(logWARNING) << "Unknown logging level '" << level << "'. Using INFO level as default.";
      return logINFO;
    }

  protected:
    std::ostringstream os;

  private:
    log(const log &);
    log &operator =(const log &);
  };

  class logger_stream {
  public:
    /**
     * \implstatus10
     * \ingroup logging
     */
    static inline FILE *&stream() {
      static FILE *pStream = fopen("dco.log", "a");
      return pStream;
    }

    static inline void output(const std::string &msg) {
      FILE *pStream = stream();
      if (!pStream)
        return;
      fprintf(pStream, "%s", msg.c_str());
      fflush(pStream);
    }
  };

  typedef  log<logger_stream> logger;

  /**
   * \implstatus10
   * \ingroup logging
   */
#define DCO_LOGL(level)                                                  \
    if (FILELOG_MAX_LEVEL < 0) ;                                        \
    else if (level > FILELOG_MAX_LEVEL) ;                               \
    else if (level > dco::logger::reporting_level() || !dco::logger_stream::stream()) ; \
    else dco::logger(__FILE__, __LINE__)(level)

  /**
   * \implstatus10
   * \ingroup logging
   */
#define DCO_LOG(level)                                                  \
    if (FILELOG_MAX_LEVEL < 0) ;                                        \
    else if (level > FILELOG_MAX_LEVEL) ;                               \
    else if (level > dco::logger::reporting_level() || !dco::logger_stream::stream()) ; \
    else dco::logger()(level)

#if defined(WIN32) || defined(_WIN32) || defined(__WIN32__)

  inline std::string NowTime() {
    const int MAX_LEN = 200;
    char buffer[MAX_LEN];
    if (GetTimeFormatA(LOCALE_USER_DEFAULT, 0, 0,
                       "HH':'mm':'ss", buffer, MAX_LEN) == 0)
      return "Error in NowTime()";

    char result[100] = {0};
    static DWORD first = GetTickCount();
    std::sprintf(result, "%s.%03ld", buffer, static_cast<long>(GetTickCount() - first) % 1000);
    return result;
  }

#else

  inline std::string NowTime() {
    char buffer[11];
    time_t t;
    time(&t);
    tm r;
    strftime(buffer, sizeof(buffer), "%X", localtime_r(&t, &r));
    struct timeval tv;
    gettimeofday(&tv, 0);
    char result[100] = {0};
    std::sprintf(result, "%s.%03ld", buffer, static_cast<long>(tv.tv_usec) / 1000);
    return result;
  }

#endif //WIN32

}

#ifndef DCO_LICENSE
#define DCO_LICENSE
#endif
typedef long int DCO_TAPE_INT;
namespace dco {
  namespace stce_9752 {
    template<class stce_9753>struct stce_9754{ template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9757 (const stce_9755 &stce_9758, const stce_9756 &stce_9759) { return stce_9758._value() + stce_9759._value(); } template<class stce_9755,class stce_9756>static inline const stce_9753 stce_9760(const stce_9753 &_value , const stce_9755 &stce_9758 , const stce_9756 &stce_9759 ) { (void) _value; (void)stce_9758; (void)stce_9759; return 1.0; } template<class stce_9755,class stce_9756>static inline const stce_9753 stce_9761(const stce_9753 &_value , const stce_9755 &stce_9758 , const stce_9756 &stce_9759 ) { (void) _value; (void)stce_9758; (void)stce_9759; return 1.0; } };
    template<class stce_9753>struct stce_9762{ template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9757 (const stce_9755 &stce_9758, const stce_9756 &stce_9759) { return stce_9758._value() - stce_9759._value(); } template<class stce_9755,class stce_9756>static inline const stce_9753 stce_9760(const stce_9753 &_value , const stce_9755 &stce_9758 , const stce_9756 &stce_9759 ) { (void) _value; (void)stce_9758; (void)stce_9759; return 1.0; } template<class stce_9755,class stce_9756>static inline const stce_9753 stce_9761(const stce_9753 &_value , const stce_9755 &stce_9758 , const stce_9756 &stce_9759 ) { (void) _value; (void)stce_9758; (void)stce_9759; return -1.0; } };
    template<class stce_9753>struct stce_9763{ template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9757 (const stce_9755 &stce_9758, const stce_9756 &stce_9759) { return stce_9758._value() * stce_9759._value(); } template<class stce_9755,class stce_9756>static inline const stce_9753 stce_9760(const stce_9753 &_value , const stce_9755 &stce_9758 , const stce_9756 &stce_9759 ) { (void) _value; (void)stce_9758; (void)stce_9759; return stce_9759._value(); } template<class stce_9755,class stce_9756>static inline const stce_9753 stce_9761(const stce_9753 &_value , const stce_9755 &stce_9758 , const stce_9756 &stce_9759 ) { (void) _value; (void)stce_9758; (void)stce_9759; return stce_9758._value(); } };
    template<class stce_9753>struct stce_9764{ template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9757 (const stce_9755 &stce_9758, const stce_9756 &stce_9759) { return stce_9758._value() / stce_9759._value(); } template<class stce_9755,class stce_9756>static inline const stce_9753 stce_9760(const stce_9753 &_value , const stce_9755 &stce_9758 , const stce_9756 &stce_9759 ) { (void) _value; (void)stce_9758; (void)stce_9759; return 1.0 / stce_9759._value(); } template<class stce_9755,class stce_9756>static inline const stce_9753 stce_9761(const stce_9753 &_value , const stce_9755 &stce_9758 , const stce_9756 &stce_9759 ) { (void) _value; (void)stce_9758; (void)stce_9759; return -_value / stce_9759._value(); } };
    template<class stce_9753>struct stce_9765{ template<class stce_9755>static inline const stce_9753 stce_9757(const stce_9755 &stce_9758, const stce_9753 &stce_9759) { return stce_9758._value() + stce_9759; } template<class stce_9755>static inline const stce_9753 stce_9760(const stce_9753 &_value , const stce_9755 &stce_9758 , const stce_9753 &stce_9759 ) { (void)_value; (void)stce_9758; (void)stce_9759; return 1.0; } }; template<class stce_9753>struct stce_9766{ template<class stce_9756>static inline const stce_9753 stce_9757(const stce_9753 &stce_9758, const stce_9756 &stce_9759) { return stce_9758 + stce_9759._value(); } template<class stce_9756>static inline const stce_9753 stce_9761(const stce_9753 &_value , const stce_9753 &stce_9758 , const stce_9756 &stce_9759 ) { (void) _value; (void)stce_9758; (void)stce_9759; return 1.0; } };
    template<class stce_9753>struct stce_9767{ template<class stce_9755>static inline const stce_9753 stce_9757(const stce_9755 &stce_9758, const stce_9753 &stce_9759) { return stce_9758._value() - stce_9759; } template<class stce_9755>static inline const stce_9753 stce_9760(const stce_9753 &_value , const stce_9755 &stce_9758 , const stce_9753 &stce_9759 ) { (void)_value; (void)stce_9758; (void)stce_9759; return 1.0; } }; template<class stce_9753>struct stce_9768{ template<class stce_9756>static inline const stce_9753 stce_9757(const stce_9753 &stce_9758, const stce_9756 &stce_9759) { return stce_9758 - stce_9759._value(); } template<class stce_9756>static inline const stce_9753 stce_9761(const stce_9753 &_value , const stce_9753 &stce_9758 , const stce_9756 &stce_9759 ) { (void) _value; (void)stce_9758; (void)stce_9759; return -1.0; } };
    template<class stce_9753>struct stce_9769{ template<class stce_9755>static inline const stce_9753 stce_9757(const stce_9755 &stce_9758, const stce_9753 &stce_9759) { return stce_9758._value() * stce_9759; } template<class stce_9755>static inline const stce_9753 stce_9760(const stce_9753 &_value , const stce_9755 &stce_9758 , const stce_9753 &stce_9759 ) { (void)_value; (void)stce_9758; (void)stce_9759; return stce_9759; } }; template<class stce_9753>struct stce_9770{ template<class stce_9756>static inline const stce_9753 stce_9757(const stce_9753 &stce_9758, const stce_9756 &stce_9759) { return stce_9758 * stce_9759._value(); } template<class stce_9756>static inline const stce_9753 stce_9761(const stce_9753 &_value , const stce_9753 &stce_9758 , const stce_9756 &stce_9759 ) { (void) _value; (void)stce_9758; (void)stce_9759; return stce_9758; } };
    template<class stce_9753>struct stce_9771{ template<class stce_9755>static inline const stce_9753 stce_9757(const stce_9755 &stce_9758, const stce_9753 &stce_9759) { return stce_9758._value() / stce_9759; } template<class stce_9755>static inline const stce_9753 stce_9760(const stce_9753 &_value , const stce_9755 &stce_9758 , const stce_9753 &stce_9759 ) { (void)_value; (void)stce_9758; (void)stce_9759; return 1.0 / stce_9759; } }; template<class stce_9753>struct stce_9772{ template<class stce_9756>static inline const stce_9753 stce_9757(const stce_9753 &stce_9758, const stce_9756 &stce_9759) { return stce_9758 / stce_9759._value(); } template<class stce_9756>static inline const stce_9753 stce_9761(const stce_9753 &_value , const stce_9753 &stce_9758 , const stce_9756 &stce_9759 ) { (void) _value; (void)stce_9758; (void)stce_9759; return -_value / stce_9759._value(); } };
    using std::sin; template<class stce_9753>struct stce_9773{ template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) { return sin(arg._value()); } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) { (void)_value; return (cos(stce_9776._value())); } };
    using std::cos; template<class stce_9753>struct stce_9777{ template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) { return cos(arg._value()); } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) { (void)_value; return (-sin(stce_9776._value())); } };
    using std::tan; template<class stce_9753>struct stce_9778{ template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) { return tan(arg._value()); } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) { (void)_value; return ((1.0 + (tan(stce_9776._value())*tan(stce_9776._value())))); } };
    using std::cosh; template<class stce_9753>struct stce_9779{ template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) { return cosh(arg._value()); } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) { (void)_value; return (sinh(stce_9776._value())); } };
    using std::sinh; template<class stce_9753>struct stce_9780{ template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) { return sinh(arg._value()); } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) { (void)_value; return (cosh(stce_9776._value())); } };
    using std::asin; template<class stce_9753>struct stce_9781{ template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) { return asin(arg._value()); } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) { (void)_value; return (1 / sqrt(1.0 - stce_9776._value()*stce_9776._value())); } };
    using std::acos; template<class stce_9753>struct stce_9782{ template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) { return acos(arg._value()); } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) { (void)_value; return (-1 / sqrt(1.0 - stce_9776._value()*stce_9776._value())); } };
    using std::exp; template<class stce_9753>struct stce_9783{ template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) { return exp(arg._value()); } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) { (void)_value; return (exp(stce_9776._value())); } };
    using std::atan; template<class stce_9753>struct stce_9784{ template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) { return atan(arg._value()); } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) { (void)_value; return (1.0 / (1.0 + stce_9776._value()*stce_9776._value())); } };
    using std::tanh; template<class stce_9753>struct stce_9785{ template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) { return tanh(arg._value()); } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) { (void)_value; return (1.0 - tanh(stce_9776._value())*tanh(stce_9776._value())); } };
    using std::sqrt; template<class stce_9753>struct stce_9786{ template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) { return sqrt(arg._value()); } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) { (void)_value; return (1.0 / (2.0 * sqrt(stce_9776._value()))); } };
    using std::log; template<class stce_9753>struct stce_9787{ template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) { return log(arg._value()); } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) { (void)_value; return (1.0 / stce_9776._value()); } };
    using ::erf; template<class stce_9753>struct stce_9788{ template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) { return erf(arg._value()); } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) { (void)_value; return (2.0 / sqrt(3.14159265358979323846264338327950288) * exp(-stce_9776._value() * stce_9776._value())); } };
    using ::erfc; template<class stce_9753>struct stce_9789{ template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) { return erfc(arg._value()); } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) { (void)_value; return (-2.0 / sqrt(3.14159265358979323846264338327950288) * exp(-stce_9776._value() * stce_9776._value())); } };
    using ::asinh; template<class stce_9753>struct stce_9790{ template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) { return asinh(arg._value()); } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) { (void)_value; return (1. / sqrt(1. + (stce_9776._value()*stce_9776._value()))); } };
    using ::acosh; template<class stce_9753>struct stce_9791{ template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) { return acosh(arg._value()); } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) { (void)_value; return (1. / sqrt((stce_9776._value()*stce_9776._value()) - 1.)); } };
    using ::expm1; template<class stce_9753>struct stce_9792{ template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) { return expm1(arg._value()); } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) { (void)_value; return (exp(stce_9776._value())); } };
    using ::atanh; template<class stce_9753>struct stce_9793{ template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) { return atanh(arg._value()); } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) { (void)_value; return (1. / (1. - (stce_9776._value()*stce_9776._value()))); } };
    using ::log1p; template<class stce_9753>struct stce_9794{ template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) { return log1p(arg._value()); } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) { (void)_value; return (1.0 / (stce_9776._value() + 1)); } };
    using ::log10; template<class stce_9753>struct stce_9795{ template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &arg) { return log10(arg._value()); } template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9776) { (void)_value; return (1.0 / (stce_9776._value()*log(10))); } };
    template<class stce_9753>struct stce_9796 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &stce_9758) {
        return -stce_9758._value();
      }
      template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9758 ) {
        (void)_value;
        (void)stce_9758;
        return -1.0;
      }
    };
    template<class stce_9753>struct stce_9797 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &stce_9758) {
        return stce_9758._value();
      }
      template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9758 ) {
        (void)_value;
        (void)stce_9758;
        return 1.0;
      }
    };
    using ::fabs;
    template<class stce_9753>struct stce_9798 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &stce_9758) {
        return fabs(stce_9758._value());
      }
      template<class stce_9774>static inline const stce_9753 stce_9775(const stce_9753 &_value , const stce_9774 &stce_9758 ) {
        (void) _value;
        if (stce_9758._value() < 0) return -1.0;
        else return 1.0;
      }
    };
    template<class stce_9753>struct stce_9799{ template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9757(const stce_9755 &stce_9758, const stce_9756 &stce_9759) { (void) stce_9758; (void) stce_9759; return atan2(stce_9758._value(),stce_9759._value()); } template<class stce_9755,class stce_9756>static inline const stce_9753 stce_9760(const stce_9753 _value , const stce_9755 &stce_9758, const stce_9756 &stce_9759) { (void) _value; (void) stce_9758; (void) stce_9759; return stce_9759._value() / (stce_9759._value() * stce_9759._value() + stce_9758._value() * stce_9758._value()); } template<class stce_9755,class stce_9756>static inline const stce_9753 stce_9761(const stce_9753 _value , const stce_9755 &stce_9758, const stce_9756 &stce_9759) { (void) _value; (void) stce_9758; (void) stce_9759; return -stce_9758._value() / (stce_9759._value() * stce_9759._value() + stce_9758._value() * stce_9758._value()); } }; template<class stce_9753>struct stce_9800{ template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &stce_9758, const stce_9753 &stce_9759) { (void) stce_9758; (void) stce_9759; return atan2(stce_9758._value(),stce_9759); } template<class stce_9774>static inline const stce_9753 stce_9760(const stce_9753 _value , const stce_9774 &stce_9758, const stce_9753 &stce_9759) { (void) _value; (void) stce_9758; (void) stce_9759; return stce_9759 / (stce_9759 * stce_9759 + stce_9758._value() * stce_9758._value()); } }; template<class stce_9753>struct stce_9801{ template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9753 &stce_9758, const stce_9774 &stce_9759) { (void) stce_9758; (void) stce_9759; return atan2(stce_9758,stce_9759._value()); } template<class stce_9774>static inline const stce_9753 stce_9761(const stce_9753 _value , const stce_9753 &stce_9758, const stce_9774 &stce_9759) { (void) _value; (void) stce_9758; (void) stce_9759; return -stce_9758 / (stce_9759._value() * stce_9759._value() + stce_9758 *stce_9758); } };
    template<class stce_9753>
    struct stce_9802 {
      template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9757(const stce_9755 &stce_9758, const stce_9756 &stce_9759) {
        return pow(stce_9758._value(), stce_9759._value());
      }
      template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9760(const stce_9753 _value , const stce_9755 &stce_9758, const stce_9756 &stce_9759) {
        (void)_value;
        return stce_9759._value() * pow(stce_9758._value(), stce_9759._value() - 1.0);
      }
      template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9761(const stce_9753 _value , const stce_9755 &stce_9758, const stce_9756 &stce_9759) {
        (void) _value;
        if (stce_9758 <= 0)
          return 0;
        else
          return log(stce_9758._value()) * pow(stce_9758._value(), stce_9759._value());
      }
    };
    template<class stce_9753>
    struct stce_9803 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &stce_9758, const stce_9753 &stce_9759) {
        return pow(stce_9758._value(), stce_9759);
      }
      template<class stce_9774>static inline const stce_9753 stce_9760(const stce_9753 _value , const stce_9774 &stce_9758, const stce_9753 &stce_9759) {
        (void) _value;
        return stce_9759 * pow(stce_9758._value(), stce_9759 - 1.0);
      }
    };
    template<class stce_9753>
    struct stce_9804 {
      template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9753 &stce_9758, const stce_9774 &stce_9759) {
        return pow(stce_9758, stce_9759._value());
      }
      template<class stce_9774>static inline const stce_9753 stce_9761(const stce_9753 _value , const stce_9753 &stce_9758, const stce_9774 &stce_9759) {
        (void) _value;
        return log(stce_9758) * pow(stce_9758, stce_9759._value());
      }
    };
    template<class stce_9753>struct stce_9805{ template<class stce_9755, class stce_9756>static inline const stce_9753 stce_9757(const stce_9755 &stce_9758, const stce_9756 &stce_9759) { (void) stce_9758; (void) stce_9759; return hypot(stce_9758._value(),stce_9759._value()); } template<class stce_9755,class stce_9756>static inline const stce_9753 stce_9760(const stce_9753 _value , const stce_9755 &stce_9758, const stce_9756 &stce_9759) { (void) _value; (void) stce_9758; (void) stce_9759; return stce_9758._value() / _value; } template<class stce_9755,class stce_9756>static inline const stce_9753 stce_9761(const stce_9753 _value , const stce_9755 &stce_9758, const stce_9756 &stce_9759) { (void) _value; (void) stce_9758; (void) stce_9759; return stce_9759._value() / _value; } }; template<class stce_9753>struct stce_9806{ template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9774 &stce_9758, const stce_9753 &stce_9759) { (void) stce_9758; (void) stce_9759; return hypot(stce_9758._value(),stce_9759); } template<class stce_9774>static inline const stce_9753 stce_9760(const stce_9753 _value , const stce_9774 &stce_9758, const stce_9753 &stce_9759) { (void) _value; (void) stce_9758; (void) stce_9759; return stce_9758._value() / _value; } }; template<class stce_9753>struct stce_9807{ template<class stce_9774>static inline const stce_9753 stce_9757(const stce_9753 &stce_9758, const stce_9774 &stce_9759) { (void) stce_9758; (void) stce_9759; return hypot(stce_9758,stce_9759._value()); } template<class stce_9774>static inline const stce_9753 stce_9761(const stce_9753 _value , const stce_9753 &stce_9758, const stce_9774 &stce_9759) { (void) _value; (void) stce_9758; (void) stce_9759; return stce_9759._value() / _value; } };
  }
}
namespace dco {
  namespace helper {
    template <typename stce_9774>
    struct stce_9808 {
      typedef stce_9774 type;
    };
    template<class stce_9809, const int stce_9810 = DCO_T1V_SIZE>
    struct stce_9811 {
      static const int stce_9812 = stce_9810;
      typedef stce_9809 value_t;
      stce_9809 stce_9813[stce_9810];
      void stce_9814(const stce_9809 &stce_9815) {
        for (int stce_9816 = 0; stce_9816 < stce_9810; ++stce_9816)
          stce_9813[stce_9816] = stce_9815;
      }
      stce_9811(const stce_9809 &stce_9815) {
        stce_9814(stce_9815);
      }
      stce_9811() {
        stce_9814(0);
      }
      stce_9809 &operator[](const int stce_9817) {
        return stce_9813[stce_9817];
      }
      const stce_9809 &operator[](const int stce_9817) const {
        return stce_9813[stce_9817];
      }
      stce_9811 &operator= (const stce_9809 &stce_9818) {
        for (int stce_9816 = 0; stce_9816 < stce_9810; ++stce_9816)
          this->stce_9813[stce_9816] = stce_9818;
        return *this;
      }
      stce_9811 &operator += (const stce_9811 &stce_9818) {
        for (int stce_9816 = 0; stce_9816 < stce_9810; ++stce_9816)
          this->stce_9813[stce_9816] += stce_9818.stce_9813[stce_9816];
        return *this;
      }
    };
    template<class stce_9774>
    struct stce_9819 {
      static const int stce_9820 = 1;
    };
    template<class stce_9809, int stce_9810>
    struct stce_9819< stce_9811<stce_9809, stce_9810> > {
      static const int stce_9820 = stce_9810;
    };
    template<class stce_9809, int stce_9810>
    static inline
    stce_9811<stce_9809, stce_9810>
    operator * (const double &stce_9821, const stce_9811<stce_9809, stce_9810> &stce_9822) {
      stce_9811<stce_9809, stce_9810> stce_9823;
      for (int stce_9816 = 0; stce_9816 < stce_9810; ++stce_9816)
        stce_9823.stce_9813[stce_9816] = stce_9822.stce_9813[stce_9816] * stce_9821;
      return stce_9823;
    }
    template<class stce_9809, int stce_9810>
    static inline
    stce_9811<stce_9809, stce_9810>
    operator + (const stce_9811<stce_9809, stce_9810> &stce_9824, const stce_9811<stce_9809, stce_9810> &stce_9818) {
      stce_9811<stce_9809, stce_9810> stce_9823;
      for (int stce_9816 = 0; stce_9816 < stce_9810; ++stce_9816)
        stce_9823.stce_9813[stce_9816] = stce_9824.stce_9813[stce_9816] + stce_9818.stce_9813[stce_9816];
      return stce_9823;
    }
    template<class stce_9809, int stce_9810>
    static inline
    stce_9811<stce_9809, stce_9810>
    operator * (const stce_9811<stce_9809, stce_9810> &stce_9824, const stce_9811<stce_9809, stce_9810> &stce_9818) {
      stce_9811<stce_9809, stce_9810> stce_9823;
      for (int stce_9816 = 0; stce_9816 < stce_9810; ++stce_9816)
        stce_9823.stce_9813[stce_9816] = stce_9824.stce_9813[stce_9816] * stce_9818.stce_9813[stce_9816];
      return stce_9823;
    }
    template<class stce_9809, int stce_9810>
    static inline
    stce_9811<stce_9809, stce_9810>
    operator * (const stce_9811<stce_9809, stce_9810> &stce_9824, const stce_9809 &stce_9818) {
      stce_9811<stce_9809, stce_9810> stce_9823;
      for (int stce_9816 = 0; stce_9816 < stce_9810; ++stce_9816)
        stce_9823.stce_9813[stce_9816] = stce_9824.stce_9813[stce_9816] * stce_9818;
      return stce_9823;
    }
    template<class stce_9809, int stce_9810>
    static inline std::ostream &operator << (std::ostream &out, const stce_9811<stce_9809, stce_9810> &stce_9776) {
      out << "(";
      for (int stce_9816 = 0; stce_9816 < stce_9810 - 1; ++stce_9816) {
        out << stce_9776.stce_9813[stce_9816] << ";";
      }
      out << stce_9776.stce_9813[stce_9810 - 1];
      out << ")";
      return out;
    }
  }
}
namespace dco {
  template<typename stce_9825>
  class stce_9826 {
    const stce_9825 &stce_9774;
  public:
    stce_9826(const stce_9825 &stce_9827) : stce_9774(stce_9827) {}
    template <typename stce_9828>
    stce_9828 *create() const {
      return new stce_9828(stce_9774);
    }
  };
  template<>
  class stce_9826<void *> {
  public:
    stce_9826(void *stce_9829) {
      (void) stce_9829;
    }
    template <typename stce_9828>
    stce_9828 *create() const {
      return new stce_9828();
    }
  };
  class stce_9830 {
    std::ofstream stce_9831;
    std::string stce_9832;
    std::string stce_9833;
    std::stringstream stce_9834;
    std::stringstream stce_9835;
  public:
    stce_9830(const std::string &filename) : stce_9832("digraph {\n"), stce_9833("\n}\n") {
      stce_9834.clear();
      stce_9835.clear();
      stce_9831.open(filename.c_str());
    }
    void stce_9836(std::vector<DCO_TAPE_INT> &stce_9837, std::vector<DCO_TAPE_INT> &stce_9838, DCO_TAPE_INT stce_9839) {
      stce_9834 << stce_9839 << "[shape=box,label=\"(" << stce_9839 << ", ext. function)\",color=\"red\"]\n";
      for (std::vector<DCO_TAPE_INT>::iterator stce_9816 = stce_9837.begin(); stce_9816 != stce_9837.end(); ++stce_9816) {
        stce_9835 << *stce_9816 << " -> " << stce_9839 << "[label=\"unknown" << "\",color=\"red\"]\n";
      }
      for (std::vector<DCO_TAPE_INT>::iterator stce_9816 = stce_9838.begin(); stce_9816 != stce_9838.end(); ++stce_9816) {
        stce_9835 << stce_9839 << " -> " << *stce_9816 << "[label=\"unknown" << "\",color=\"red\"]\n";
      }
    }
    void stce_9840(DCO_TAPE_INT stce_9839) {
      stce_9834 << stce_9839 << "[shape=box,label=\"" << stce_9839 << "\", color=\"green\"]\n";
    }
    template <typename stce_9841>
    void stce_9840(DCO_TAPE_INT stce_9839, stce_9841 stce_9842) {
      stce_9834 << stce_9839 << "[shape=box,label=\"(" << stce_9839 << ", " << stce_9842 << ")\", color=\"green\"]\n";
    }
    template <typename stce_9841>
    void stce_9843(DCO_TAPE_INT stce_9844, DCO_TAPE_INT stce_9845, stce_9841 stce_9846) {
      stce_9835 << stce_9844 << " -> " << stce_9845 << "[label=\"" << stce_9846 << "\"]\n";
    }
    ~stce_9830() {
      stce_9831 << stce_9832;
      stce_9831 << stce_9834.str();
      stce_9831 << stce_9835.str();
      stce_9831 << stce_9833;
      stce_9831.close();
    }
  };
}
namespace dco {
  namespace stce_9847 {
    template<class stce_9753, class stce_9848, class stce_9849> struct stce_9850 {
      const stce_9753 stce_9851;
      const stce_9848 &stce_9852;
      typedef stce_9753 VALUE_TYPE;
      typedef typename stce_9848::DATA_TYPE DATA_TYPE;
      stce_9850(const stce_9848 &arg) : stce_9851(stce_9849::stce_9757(arg)), stce_9852(arg) {
      }
      inline const stce_9753 &_value() const {
        return stce_9851;
      }
      inline const stce_9753 pval() const {
        return stce_9849::stce_9775(_value(), stce_9852);
      }
    };
    template<class stce_9753, class stce_9853, class stce_9854, class stce_9849> struct stce_9855 {
      stce_9753 stce_9851;
      const stce_9853 &stce_9856;
      const stce_9854 &stce_9857;
      typedef stce_9753 VALUE_TYPE;
      typedef typename stce_9853::DATA_TYPE DATA_TYPE;
      stce_9855(const stce_9853 &stce_9758, const stce_9854 &stce_9759) :
        stce_9851(stce_9849::stce_9757(stce_9758, stce_9759)),
        stce_9856(stce_9758),
        stce_9857(stce_9759) {
      }
      inline const stce_9753 stce_9858() const {
        return stce_9849::stce_9760(_value(), stce_9856, stce_9857);
      }
      inline const stce_9753 stce_9859() const {
        return stce_9849::stce_9761(_value(), stce_9856, stce_9857);
      }
      inline const stce_9753 &_value() const {
        return stce_9851;
      }
    };
    template<class stce_9753, class stce_9853, class stce_9849> struct stce_9860 {
      const stce_9753 stce_9851;
      const stce_9853 &stce_9856;
      const stce_9753 stce_9857;
      typedef stce_9753 VALUE_TYPE;
      typedef typename stce_9853::DATA_TYPE DATA_TYPE;
      stce_9860(const stce_9853 &stce_9758, const stce_9753 &stce_9759) :
        stce_9851(stce_9849::stce_9757(stce_9758, stce_9759)), stce_9856(stce_9758), stce_9857(stce_9759) {}
      inline const stce_9753 &_value() const {
        return stce_9851;
      }
      inline const stce_9753 stce_9858() const {
        return stce_9849::stce_9760(stce_9851, stce_9856, stce_9857);
      }
    };
    template<class stce_9753, class stce_9854, class stce_9849> struct stce_9861 {
      const stce_9753 stce_9851;
      const stce_9753 stce_9856;
      const stce_9854 &stce_9857;
      typedef stce_9753 VALUE_TYPE;
      typedef typename stce_9854::DATA_TYPE DATA_TYPE;
      stce_9861(const stce_9753 &stce_9758, const stce_9854 &stce_9759) :
        stce_9851(stce_9849::stce_9757(stce_9758, stce_9759)), stce_9856(stce_9758), stce_9857(stce_9759) {}
      inline const stce_9753 &_value() const {
        return stce_9851;
      }
      inline const stce_9753 stce_9859() const {
        return stce_9849::stce_9761(stce_9851, stce_9856, stce_9857);
      }
    };
    template <typename stce_9774>
    struct stce_9862 {
      typedef stce_9774 stce_9825;
    };
    template<class stce_9753, class stce_9863> struct stce_9864 {
    private:
      stce_9753 stce_9851;
      stce_9863 stce_9865;
    public:
      typedef stce_9753 VALUE_TYPE;
      typedef stce_9863 DATA_TYPE;
      typedef typename stce_9862<stce_9753>::stce_9825 stce_9866;
      inline const stce_9753 &_value() const {
        return stce_9851;
      }
      inline stce_9753 &_value() {
        return stce_9851;
      }
      inline const stce_9863 &_data() const {
        return stce_9865;
      }
      inline stce_9863 &_data() {
        return stce_9865;
      }
      inline void _clear() {
        stce_9865.clear();
      }
      inline stce_9864() : stce_9851(static_cast<stce_9753>(0.0)) {}
      template<class stce_9867, class stce_9868>
      inline stce_9864(const stce_9864<stce_9867, stce_9868> &stce_9869) : stce_9851(stce_9869) {}
      inline stce_9864(const stce_9866 &stce_9869) : stce_9851(stce_9869) {}
      inline stce_9864 &operator = (const stce_9864 &stce_9776) {
        this->stce_9851 = stce_9776.stce_9851;
        this->stce_9865 = stce_9776.stce_9865;
        return *this;
      }
      inline stce_9864 &operator =(const stce_9866 &stce_9870) {
        this->stce_9851 = stce_9870;
        this->stce_9865.clear();
        return *this;
      }
      template<class stce_9867, class stce_9868>
      inline stce_9864 &operator =(const stce_9864<stce_9867, stce_9868> &stce_9870) {
        this->stce_9851 = stce_9870;
        this->stce_9865.clear();
        return *this;
      }
      private: template<class stce_9871, class stce_9872, class stce_9873 > inline void stce_9874(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) { stce_9863::stce_9875(stce_9776, *this); this->stce_9851 = stce_9776.stce_9851; } public: template<class stce_9871, class stce_9872, class stce_9873 > stce_9864(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) { stce_9874(stce_9776); } template<class stce_9871, class stce_9872, class stce_9873 > inline stce_9864& operator=(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) { stce_9874(stce_9776); return *this; }
      private: template<class stce_9871, class stce_9873 > inline void stce_9874(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) { stce_9863::stce_9875(stce_9776, *this); this->stce_9851 = stce_9776.stce_9851; } public: template<class stce_9871, class stce_9873 > stce_9864(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) { stce_9874(stce_9776); } template<class stce_9871, class stce_9873 > inline stce_9864& operator=(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) { stce_9874(stce_9776); return *this; }
      private: template<class stce_9872, class stce_9873 > inline void stce_9874(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) { stce_9863::stce_9875(stce_9776, *this); this->stce_9851 = stce_9776.stce_9851; } public: template<class stce_9872, class stce_9873 > stce_9864(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) { stce_9874(stce_9776); } template<class stce_9872, class stce_9873 > inline stce_9864& operator=(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) { stce_9874(stce_9776); return *this; }
      private: template<class stce_9876, class stce_9873 > inline void stce_9874(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) { stce_9863::stce_9875(stce_9776, *this); this->stce_9851 = stce_9776.stce_9851; } public: template<class stce_9876, class stce_9873 > stce_9864(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) { stce_9874(stce_9776); } template<class stce_9876, class stce_9873 > inline stce_9864& operator=(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) { stce_9874(stce_9776); return *this; }
      template<class stce_9868> inline stce_9864& operator += (const stce_9864<stce_9753, stce_9868> &stce_9776){ *this = *this + stce_9776; return *this; } template<class stce_9871, class stce_9872, class stce_9873 > inline stce_9864& operator += (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776){ *this = *this + stce_9776; return *this; } template<class stce_9871, class stce_9873 > inline stce_9864& operator += (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776){ *this = *this + stce_9776; return *this; } template<class stce_9872, class stce_9873 > inline stce_9864& operator += (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776){ *this = *this + stce_9776; return *this; } template<class stce_9876, class stce_9873 > inline stce_9864& operator += (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776){ *this = *this + stce_9776; return *this; } inline stce_9864& operator += (const stce_9753 &stce_9776) { this->_value() += stce_9776; return *this; }
      template<class stce_9868> inline stce_9864& operator -= (const stce_9864<stce_9753, stce_9868> &stce_9776){ *this = *this - stce_9776; return *this; } template<class stce_9871, class stce_9872, class stce_9873 > inline stce_9864& operator -= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776){ *this = *this - stce_9776; return *this; } template<class stce_9871, class stce_9873 > inline stce_9864& operator -= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776){ *this = *this - stce_9776; return *this; } template<class stce_9872, class stce_9873 > inline stce_9864& operator -= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776){ *this = *this - stce_9776; return *this; } template<class stce_9876, class stce_9873 > inline stce_9864& operator -= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776){ *this = *this - stce_9776; return *this; } inline stce_9864& operator -= (const stce_9753 &stce_9776) { this->_value() -= stce_9776; return *this; }
      template<class stce_9868> inline stce_9864& operator *= (const stce_9864<stce_9753, stce_9868> &stce_9776){ *this = *this * stce_9776; return *this; } template<class stce_9871, class stce_9872, class stce_9873 > inline stce_9864& operator *= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776){ *this = *this * stce_9776; return *this; } template<class stce_9871, class stce_9873 > inline stce_9864& operator *= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776){ *this = *this * stce_9776; return *this; } template<class stce_9872, class stce_9873 > inline stce_9864& operator *= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776){ *this = *this * stce_9776; return *this; } template<class stce_9876, class stce_9873 > inline stce_9864& operator *= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776){ *this = *this * stce_9776; return *this; } inline stce_9864& operator *= (const stce_9753 &stce_9776) { *this = *this * stce_9776; return *this; }
      template<class stce_9868> inline stce_9864& operator /= (const stce_9864<stce_9753, stce_9868> &stce_9776){ *this = *this / stce_9776; return *this; } template<class stce_9871, class stce_9872, class stce_9873 > inline stce_9864& operator /= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776){ *this = *this / stce_9776; return *this; } template<class stce_9871, class stce_9873 > inline stce_9864& operator /= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776){ *this = *this / stce_9776; return *this; } template<class stce_9872, class stce_9873 > inline stce_9864& operator /= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776){ *this = *this / stce_9776; return *this; } template<class stce_9876, class stce_9873 > inline stce_9864& operator /= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776){ *this = *this / stce_9776; return *this; } inline stce_9864& operator /= (const stce_9753 &stce_9776) { *this = *this / stce_9776; return *this; }
      inline stce_9864 &operator ++() {
        ++this->stce_9851;
        return *this;
      }
      inline stce_9864 &operator --() {
        --this->stce_9851;
        return *this;
      }
      inline stce_9864 operator ++(int) {
        stce_9864 stce_9823(*this);
        ++this->stce_9851;
        return stce_9823;
      }
      inline stce_9864 operator --(int) {
        stce_9864 stce_9823(*this);
        --this->stce_9851;
        return stce_9823;
      }
    };
    template<class stce_9753, class stce_9863>
    struct stce_9862<stce_9864<stce_9753, stce_9863> > {
      typedef typename stce_9862<stce_9753>::stce_9825 stce_9825;
    };
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9796<stce_9753> > operator -( const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9752::stce_9796<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9796<stce_9753> > operator -( const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9752::stce_9796<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9796<stce_9753> > operator -( const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9752::stce_9796<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9796<stce_9753> > operator -( const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9752::stce_9796<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9796<stce_9753> > operator -( const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9752::stce_9796<stce_9753> >(stce_9878); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9797<stce_9753> > operator +( const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9752::stce_9797<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9797<stce_9753> > operator +( const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9752::stce_9797<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9797<stce_9753> > operator +( const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9752::stce_9797<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9797<stce_9753> > operator +( const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9752::stce_9797<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9797<stce_9753> > operator +( const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9752::stce_9797<stce_9753> >(stce_9878); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9773<stce_9753> > sin( const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9752::stce_9773<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9773<stce_9753> > sin( const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9752::stce_9773<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9773<stce_9753> > sin( const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9752::stce_9773<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9773<stce_9753> > sin( const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9752::stce_9773<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9773<stce_9753> > sin( const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9752::stce_9773<stce_9753> >(stce_9878); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9777<stce_9753> > cos( const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9752::stce_9777<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9777<stce_9753> > cos( const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9752::stce_9777<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9777<stce_9753> > cos( const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9752::stce_9777<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9777<stce_9753> > cos( const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9752::stce_9777<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9777<stce_9753> > cos( const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9752::stce_9777<stce_9753> >(stce_9878); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9778<stce_9753> > tan( const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9752::stce_9778<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9778<stce_9753> > tan( const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9752::stce_9778<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9778<stce_9753> > tan( const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9752::stce_9778<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9778<stce_9753> > tan( const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9752::stce_9778<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9778<stce_9753> > tan( const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9752::stce_9778<stce_9753> >(stce_9878); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9779<stce_9753> > cosh( const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9752::stce_9779<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9779<stce_9753> > cosh( const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9752::stce_9779<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9779<stce_9753> > cosh( const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9752::stce_9779<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9779<stce_9753> > cosh( const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9752::stce_9779<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9779<stce_9753> > cosh( const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9752::stce_9779<stce_9753> >(stce_9878); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9780<stce_9753> > sinh( const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9752::stce_9780<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9780<stce_9753> > sinh( const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9752::stce_9780<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9780<stce_9753> > sinh( const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9752::stce_9780<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9780<stce_9753> > sinh( const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9752::stce_9780<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9780<stce_9753> > sinh( const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9752::stce_9780<stce_9753> >(stce_9878); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9781<stce_9753> > asin( const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9752::stce_9781<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9781<stce_9753> > asin( const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9752::stce_9781<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9781<stce_9753> > asin( const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9752::stce_9781<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9781<stce_9753> > asin( const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9752::stce_9781<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9781<stce_9753> > asin( const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9752::stce_9781<stce_9753> >(stce_9878); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9782<stce_9753> > acos( const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9752::stce_9782<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9782<stce_9753> > acos( const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9752::stce_9782<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9782<stce_9753> > acos( const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9752::stce_9782<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9782<stce_9753> > acos( const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9752::stce_9782<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9782<stce_9753> > acos( const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9752::stce_9782<stce_9753> >(stce_9878); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9783<stce_9753> > exp( const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9752::stce_9783<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9783<stce_9753> > exp( const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9752::stce_9783<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9783<stce_9753> > exp( const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9752::stce_9783<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9783<stce_9753> > exp( const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9752::stce_9783<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9783<stce_9753> > exp( const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9752::stce_9783<stce_9753> >(stce_9878); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9784<stce_9753> > atan( const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9752::stce_9784<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9784<stce_9753> > atan( const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9752::stce_9784<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9784<stce_9753> > atan( const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9752::stce_9784<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9784<stce_9753> > atan( const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9752::stce_9784<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9784<stce_9753> > atan( const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9752::stce_9784<stce_9753> >(stce_9878); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9785<stce_9753> > tanh( const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9752::stce_9785<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9785<stce_9753> > tanh( const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9752::stce_9785<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9785<stce_9753> > tanh( const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9752::stce_9785<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9785<stce_9753> > tanh( const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9752::stce_9785<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9785<stce_9753> > tanh( const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9752::stce_9785<stce_9753> >(stce_9878); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9786<stce_9753> > sqrt( const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9752::stce_9786<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9786<stce_9753> > sqrt( const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9752::stce_9786<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9786<stce_9753> > sqrt( const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9752::stce_9786<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9786<stce_9753> > sqrt( const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9752::stce_9786<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9786<stce_9753> > sqrt( const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9752::stce_9786<stce_9753> >(stce_9878); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9787<stce_9753> > log( const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9752::stce_9787<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9787<stce_9753> > log( const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9752::stce_9787<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9787<stce_9753> > log( const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9752::stce_9787<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9787<stce_9753> > log( const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9752::stce_9787<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9787<stce_9753> > log( const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9752::stce_9787<stce_9753> >(stce_9878); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9788<stce_9753> > erf( const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9752::stce_9788<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9788<stce_9753> > erf( const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9752::stce_9788<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9788<stce_9753> > erf( const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9752::stce_9788<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9788<stce_9753> > erf( const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9752::stce_9788<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9788<stce_9753> > erf( const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9752::stce_9788<stce_9753> >(stce_9878); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9789<stce_9753> > erfc( const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9752::stce_9789<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9789<stce_9753> > erfc( const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9752::stce_9789<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9789<stce_9753> > erfc( const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9752::stce_9789<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9789<stce_9753> > erfc( const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9752::stce_9789<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9789<stce_9753> > erfc( const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9752::stce_9789<stce_9753> >(stce_9878); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9792<stce_9753> > expm1( const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9752::stce_9792<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9792<stce_9753> > expm1( const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9752::stce_9792<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9792<stce_9753> > expm1( const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9752::stce_9792<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9792<stce_9753> > expm1( const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9752::stce_9792<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9792<stce_9753> > expm1( const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9752::stce_9792<stce_9753> >(stce_9878); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9790<stce_9753> > asinh( const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9752::stce_9790<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9790<stce_9753> > asinh( const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9752::stce_9790<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9790<stce_9753> > asinh( const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9752::stce_9790<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9790<stce_9753> > asinh( const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9752::stce_9790<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9790<stce_9753> > asinh( const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9752::stce_9790<stce_9753> >(stce_9878); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9791<stce_9753> > acosh( const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9752::stce_9791<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9791<stce_9753> > acosh( const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9752::stce_9791<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9791<stce_9753> > acosh( const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9752::stce_9791<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9791<stce_9753> > acosh( const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9752::stce_9791<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9791<stce_9753> > acosh( const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9752::stce_9791<stce_9753> >(stce_9878); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9793<stce_9753> > atanh( const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9752::stce_9793<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9793<stce_9753> > atanh( const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9752::stce_9793<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9793<stce_9753> > atanh( const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9752::stce_9793<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9793<stce_9753> > atanh( const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9752::stce_9793<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9793<stce_9753> > atanh( const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9752::stce_9793<stce_9753> >(stce_9878); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9794<stce_9753> > log1p( const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9752::stce_9794<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9794<stce_9753> > log1p( const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9752::stce_9794<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9794<stce_9753> > log1p( const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9752::stce_9794<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9794<stce_9753> > log1p( const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9752::stce_9794<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9794<stce_9753> > log1p( const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9752::stce_9794<stce_9753> >(stce_9878); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9795<stce_9753> > log10( const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9752::stce_9795<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9795<stce_9753> > log10( const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9752::stce_9795<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9795<stce_9753> > log10( const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9752::stce_9795<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9795<stce_9753> > log10( const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9752::stce_9795<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9795<stce_9753> > log10( const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9752::stce_9795<stce_9753> >(stce_9878); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9798<stce_9753> > fabs( const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9752::stce_9798<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9798<stce_9753> > fabs( const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9752::stce_9798<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9798<stce_9753> > fabs( const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9752::stce_9798<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9798<stce_9753> > fabs( const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9752::stce_9798<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9798<stce_9753> > fabs( const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9752::stce_9798<stce_9753> >(stce_9878); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9798<stce_9753> > abs( const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9752::stce_9798<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9798<stce_9753> > abs( const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9752::stce_9798<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9798<stce_9753> > abs( const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9752::stce_9798<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9798<stce_9753> > abs( const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9752::stce_9798<stce_9753> >(stce_9878); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9798<stce_9753> > abs( const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878) { return dco::stce_9847::stce_9850<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9752::stce_9798<stce_9753> >(stce_9878); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> > operator + (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9754<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9765<stce_9753> > operator + (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9765<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9766<stce_9753> > operator + (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9766<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9765<stce_9753> > operator + (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9765<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9766<stce_9753> > operator + (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9766<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9765<stce_9753> > operator + (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9765<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9766<stce_9753> > operator + (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9766<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9765<stce_9753> > operator + (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9765<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9766<stce_9753> > operator + (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9766<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9765<stce_9753> > operator + (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9765<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9766<stce_9753> > operator + (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9766<stce_9753> >(stce_9878,stce_9879); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> > operator - (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9762<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9767<stce_9753> > operator - (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9767<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9768<stce_9753> > operator - (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9768<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9767<stce_9753> > operator - (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9767<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9768<stce_9753> > operator - (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9768<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9767<stce_9753> > operator - (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9767<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9768<stce_9753> > operator - (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9768<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9767<stce_9753> > operator - (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9767<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9768<stce_9753> > operator - (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9768<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9767<stce_9753> > operator - (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9767<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9768<stce_9753> > operator - (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9768<stce_9753> >(stce_9878,stce_9879); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> > operator * (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9763<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9769<stce_9753> > operator * (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9769<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9770<stce_9753> > operator * (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9770<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9769<stce_9753> > operator * (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9769<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9770<stce_9753> > operator * (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9770<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9769<stce_9753> > operator * (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9769<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9770<stce_9753> > operator * (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9770<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9769<stce_9753> > operator * (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9769<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9770<stce_9753> > operator * (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9770<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9769<stce_9753> > operator * (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9769<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9770<stce_9753> > operator * (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9770<stce_9753> >(stce_9878,stce_9879); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> > operator / (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9764<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9771<stce_9753> > operator / (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9771<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9772<stce_9753> > operator / (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9772<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9771<stce_9753> > operator / (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9771<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9772<stce_9753> > operator / (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9772<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9771<stce_9753> > operator / (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9771<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9772<stce_9753> > operator / (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9772<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9771<stce_9753> > operator / (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9771<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9772<stce_9753> > operator / (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9772<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9771<stce_9753> > operator / (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9771<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9772<stce_9753> > operator / (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9772<stce_9753> >(stce_9878,stce_9879); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> > atan2 (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9799<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9800<stce_9753> > atan2 (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9800<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9801<stce_9753> > atan2 (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9801<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9800<stce_9753> > atan2 (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9800<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9801<stce_9753> > atan2 (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9801<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9800<stce_9753> > atan2 (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9800<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9801<stce_9753> > atan2 (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9801<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9800<stce_9753> > atan2 (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9800<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9801<stce_9753> > atan2 (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9801<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9800<stce_9753> > atan2 (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9800<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9801<stce_9753> > atan2 (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9801<stce_9753> >(stce_9878,stce_9879); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> > pow (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9802<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9803<stce_9753> > pow (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9803<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9804<stce_9753> > pow (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9804<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9803<stce_9753> > pow (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9803<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9804<stce_9753> > pow (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9804<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9803<stce_9753> > pow (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9803<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9804<stce_9753> > pow (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9804<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9803<stce_9753> > pow (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9803<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9804<stce_9753> > pow (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9804<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9803<stce_9753> > pow (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9803<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9804<stce_9753> > pow (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9804<stce_9753> >(stce_9878,stce_9879); }
    template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9864<stce_9753, stce_9884>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> > hypot (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9879) { return dco::stce_9847::stce_9855<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>,dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>, dco::stce_9752::stce_9805<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9806<stce_9753> > hypot (const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9806<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9877 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9807<stce_9753> > hypot (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9752::stce_9807<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9806<stce_9753> > hypot (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9806<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9876, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9807<stce_9753> > hypot (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9752::stce_9807<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9806<stce_9753> > hypot (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9806<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9807<stce_9753> > hypot (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9752::stce_9807<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9806<stce_9753> > hypot (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9806<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9871, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9807<stce_9753> > hypot (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9752::stce_9807<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9806<stce_9753> > hypot (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9878, const typename dco::helper::stce_9808<stce_9753>::type &stce_9879) { return dco::stce_9847::stce_9860<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9806<stce_9753> >(stce_9878,stce_9879); } template<class stce_9753, class stce_9872, class stce_9873 > dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9807<stce_9753> > hypot (const typename dco::helper::stce_9808<stce_9753>::type &stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9879) { return dco::stce_9847::stce_9861<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9752::stce_9807<stce_9753> >(stce_9878,stce_9879); }
    template<class stce_9753, class stce_9877 > static inline bool operator == (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9879) ; template<class stce_9753, class stce_9877 > static inline bool operator == (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline bool operator == (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline bool operator == (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator == (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator == (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline bool operator == (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline bool operator == (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator == (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator == (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator == (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() == stce_9879._value(); } template<class stce_9753, class stce_9877 > static inline bool operator == (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9877 > static inline bool operator == (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const double& stce_9879) { return stce_9878._value() == stce_9879; } template<class stce_9753, class stce_9877 > static inline bool operator == (const double& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9879); template<class stce_9753, class stce_9877 > static inline bool operator == (const double& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9879) { return stce_9878 == stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator == (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator == (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const double& stce_9879) { return stce_9878._value() == stce_9879; } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator == (const double& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9879); template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator == (const double& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9879) { return stce_9878 == stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator == (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator == (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const double& stce_9879) { return stce_9878._value() == stce_9879; } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator == (const double& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9879); template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator == (const double& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9879) { return stce_9878 == stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator == (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator == (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const double& stce_9879) { return stce_9878._value() == stce_9879; } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator == (const double& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9879); template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator == (const double& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9879) { return stce_9878 == stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator == (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator == (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const double& stce_9879) { return stce_9878._value() == stce_9879; } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator == (const double& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9879); template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator == (const double& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9879) { return stce_9878 == stce_9879._value(); }
    template<class stce_9753, class stce_9877 > static inline bool operator != (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9879) ; template<class stce_9753, class stce_9877 > static inline bool operator != (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline bool operator != (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline bool operator != (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator != (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator != (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline bool operator != (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline bool operator != (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator != (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator != (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator != (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() != stce_9879._value(); } template<class stce_9753, class stce_9877 > static inline bool operator != (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9877 > static inline bool operator != (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const double& stce_9879) { return stce_9878._value() != stce_9879; } template<class stce_9753, class stce_9877 > static inline bool operator != (const double& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9879); template<class stce_9753, class stce_9877 > static inline bool operator != (const double& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9879) { return stce_9878 != stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator != (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator != (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const double& stce_9879) { return stce_9878._value() != stce_9879; } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator != (const double& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9879); template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator != (const double& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9879) { return stce_9878 != stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator != (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator != (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const double& stce_9879) { return stce_9878._value() != stce_9879; } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator != (const double& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9879); template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator != (const double& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9879) { return stce_9878 != stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator != (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator != (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const double& stce_9879) { return stce_9878._value() != stce_9879; } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator != (const double& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9879); template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator != (const double& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9879) { return stce_9878 != stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator != (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator != (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const double& stce_9879) { return stce_9878._value() != stce_9879; } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator != (const double& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9879); template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator != (const double& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9879) { return stce_9878 != stce_9879._value(); }
    template<class stce_9753, class stce_9877 > static inline bool operator < (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9879) ; template<class stce_9753, class stce_9877 > static inline bool operator < (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline bool operator < (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline bool operator < (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator < (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator < (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline bool operator < (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline bool operator < (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator < (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator < (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator < (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() < stce_9879._value(); } template<class stce_9753, class stce_9877 > static inline bool operator < (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9877 > static inline bool operator < (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const double& stce_9879) { return stce_9878._value() < stce_9879; } template<class stce_9753, class stce_9877 > static inline bool operator < (const double& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9879); template<class stce_9753, class stce_9877 > static inline bool operator < (const double& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9879) { return stce_9878 < stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator < (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator < (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const double& stce_9879) { return stce_9878._value() < stce_9879; } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator < (const double& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9879); template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator < (const double& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9879) { return stce_9878 < stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator < (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator < (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const double& stce_9879) { return stce_9878._value() < stce_9879; } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator < (const double& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9879); template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator < (const double& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9879) { return stce_9878 < stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator < (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator < (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const double& stce_9879) { return stce_9878._value() < stce_9879; } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator < (const double& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9879); template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator < (const double& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9879) { return stce_9878 < stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator < (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator < (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const double& stce_9879) { return stce_9878._value() < stce_9879; } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator < (const double& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9879); template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator < (const double& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9879) { return stce_9878 < stce_9879._value(); }
    template<class stce_9753, class stce_9877 > static inline bool operator <= (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9879) ; template<class stce_9753, class stce_9877 > static inline bool operator <= (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline bool operator <= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline bool operator <= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator <= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator <= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline bool operator <= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline bool operator <= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator <= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator <= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator <= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() <= stce_9879._value(); } template<class stce_9753, class stce_9877 > static inline bool operator <= (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9877 > static inline bool operator <= (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const double& stce_9879) { return stce_9878._value() <= stce_9879; } template<class stce_9753, class stce_9877 > static inline bool operator <= (const double& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9879); template<class stce_9753, class stce_9877 > static inline bool operator <= (const double& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9879) { return stce_9878 <= stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator <= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator <= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const double& stce_9879) { return stce_9878._value() <= stce_9879; } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator <= (const double& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9879); template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator <= (const double& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9879) { return stce_9878 <= stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator <= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator <= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const double& stce_9879) { return stce_9878._value() <= stce_9879; } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator <= (const double& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9879); template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator <= (const double& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9879) { return stce_9878 <= stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator <= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator <= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const double& stce_9879) { return stce_9878._value() <= stce_9879; } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator <= (const double& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9879); template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator <= (const double& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9879) { return stce_9878 <= stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator <= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator <= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const double& stce_9879) { return stce_9878._value() <= stce_9879; } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator <= (const double& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9879); template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator <= (const double& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9879) { return stce_9878 <= stce_9879._value(); }
    template<class stce_9753, class stce_9877 > static inline bool operator > (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9879) ; template<class stce_9753, class stce_9877 > static inline bool operator > (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline bool operator > (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline bool operator > (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator > (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator > (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline bool operator > (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline bool operator > (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator > (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator > (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator > (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() > stce_9879._value(); } template<class stce_9753, class stce_9877 > static inline bool operator > (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9877 > static inline bool operator > (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const double& stce_9879) { return stce_9878._value() > stce_9879; } template<class stce_9753, class stce_9877 > static inline bool operator > (const double& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9879); template<class stce_9753, class stce_9877 > static inline bool operator > (const double& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9879) { return stce_9878 > stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator > (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator > (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const double& stce_9879) { return stce_9878._value() > stce_9879; } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator > (const double& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9879); template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator > (const double& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9879) { return stce_9878 > stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator > (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator > (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const double& stce_9879) { return stce_9878._value() > stce_9879; } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator > (const double& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9879); template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator > (const double& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9879) { return stce_9878 > stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator > (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator > (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const double& stce_9879) { return stce_9878._value() > stce_9879; } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator > (const double& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9879); template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator > (const double& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9879) { return stce_9878 > stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator > (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator > (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const double& stce_9879) { return stce_9878._value() > stce_9879; } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator > (const double& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9879); template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator > (const double& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9879) { return stce_9878 > stce_9879._value(); }
    template<class stce_9753, class stce_9877 > static inline bool operator >= (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9879) ; template<class stce_9753, class stce_9877 > static inline bool operator >= (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline bool operator >= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline bool operator >= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator >= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator >= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline bool operator >= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline bool operator >= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator >= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline bool operator >= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9884>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) ; template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline bool operator >= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881>& stce_9879) { return stce_9878._value() >= stce_9879._value(); } template<class stce_9753, class stce_9877 > static inline bool operator >= (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9877 > static inline bool operator >= (const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9878, const double& stce_9879) { return stce_9878._value() >= stce_9879; } template<class stce_9753, class stce_9877 > static inline bool operator >= (const double& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9879); template<class stce_9753, class stce_9877 > static inline bool operator >= (const double& stce_9878, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9879) { return stce_9878 >= stce_9879._value(); } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator >= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator >= (const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9878, const double& stce_9879) { return stce_9878._value() >= stce_9879; } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator >= (const double& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9879); template<class stce_9753, class stce_9876, class stce_9873 > static inline bool operator >= (const double& stce_9878, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9879) { return stce_9878 >= stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator >= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator >= (const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9878, const double& stce_9879) { return stce_9878._value() >= stce_9879; } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator >= (const double& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9879); template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool operator >= (const double& stce_9878, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9879) { return stce_9878 >= stce_9879._value(); } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator >= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator >= (const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9878, const double& stce_9879) { return stce_9878._value() >= stce_9879; } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator >= (const double& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9879); template<class stce_9753, class stce_9871, class stce_9873 > static inline bool operator >= (const double& stce_9878, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9879) { return stce_9878 >= stce_9879._value(); } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator >= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const double& stce_9879); template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator >= (const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9878, const double& stce_9879) { return stce_9878._value() >= stce_9879; } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator >= (const double& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9879); template<class stce_9753, class stce_9872, class stce_9873 > static inline bool operator >= (const double& stce_9878, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9879) { return stce_9878 >= stce_9879._value(); }
    template<class stce_9753, class stce_9877 >
    static inline void stce_9885(dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) {
      double stce_9886 = 0;
      get(stce_9776, stce_9886);
      stce_9776 = stce_9886;
    }
    template<class stce_9753, class stce_9877 >
    static inline std::istream &operator >> (std::istream &in, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) {
      stce_9753 &stce_9886 = const_cast<stce_9753 &>(stce_9776._value());
      in >> stce_9886;
      return in;
    }
    using std::ceil; using std::floor; using std::isfinite; using std::isnan; using std::isinf; template<class stce_9753, class stce_9877 > static inline bool isnan(const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9776) { return isnan(stce_9776._value()); } template<class stce_9753, class stce_9877 > static inline bool isinf(const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9776) { return isinf(stce_9776._value()); } template<class stce_9753, class stce_9877 > static inline double ceil(const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9776) { return ceil(stce_9776._value()); } template<class stce_9753, class stce_9877 > static inline double floor(const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9776) { return floor(stce_9776._value()); } template<class stce_9753, class stce_9877 > static inline bool isfinite(const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9776) { return isfinite(stce_9776._value()); }
    using std::ceil; using std::floor; using std::isfinite; using std::isnan; using std::isinf; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool isnan(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9776) { return isnan(stce_9776._value()); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool isinf(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9776) { return isinf(stce_9776._value()); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline double ceil(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9776) { return ceil(stce_9776._value()); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline double floor(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9776) { return floor(stce_9776._value()); } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline bool isfinite(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9776) { return isfinite(stce_9776._value()); }
    using std::ceil; using std::floor; using std::isfinite; using std::isnan; using std::isinf; template<class stce_9753, class stce_9871, class stce_9873 > static inline bool isnan(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9776) { return isnan(stce_9776._value()); } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool isinf(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9776) { return isinf(stce_9776._value()); } template<class stce_9753, class stce_9871, class stce_9873 > static inline double ceil(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9776) { return ceil(stce_9776._value()); } template<class stce_9753, class stce_9871, class stce_9873 > static inline double floor(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9776) { return floor(stce_9776._value()); } template<class stce_9753, class stce_9871, class stce_9873 > static inline bool isfinite(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9776) { return isfinite(stce_9776._value()); }
    using std::ceil; using std::floor; using std::isfinite; using std::isnan; using std::isinf; template<class stce_9753, class stce_9872, class stce_9873 > static inline bool isnan(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9776) { return isnan(stce_9776._value()); } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool isinf(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9776) { return isinf(stce_9776._value()); } template<class stce_9753, class stce_9872, class stce_9873 > static inline double ceil(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9776) { return ceil(stce_9776._value()); } template<class stce_9753, class stce_9872, class stce_9873 > static inline double floor(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9776) { return floor(stce_9776._value()); } template<class stce_9753, class stce_9872, class stce_9873 > static inline bool isfinite(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9776) { return isfinite(stce_9776._value()); }
    using std::ceil; using std::floor; using std::isfinite; using std::isnan; using std::isinf; template<class stce_9753, class stce_9876, class stce_9873 > static inline bool isnan(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9776) { return isnan(stce_9776._value()); } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool isinf(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9776) { return isinf(stce_9776._value()); } template<class stce_9753, class stce_9876, class stce_9873 > static inline double ceil(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9776) { return ceil(stce_9776._value()); } template<class stce_9753, class stce_9876, class stce_9873 > static inline double floor(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9776) { return floor(stce_9776._value()); } template<class stce_9753, class stce_9876, class stce_9873 > static inline bool isfinite(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9776) { return isfinite(stce_9776._value()); }
    template<class stce_9753, class stce_9877 > static inline std::ostream& operator << (std::ostream& out, const dco::stce_9847::stce_9864<stce_9753, stce_9877>& stce_9776) { out << stce_9776._value(); return out; }
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline std::ostream& operator << (std::ostream& out, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>& stce_9776) { out << stce_9776._value(); return out; }
    template<class stce_9753, class stce_9871, class stce_9873 > static inline std::ostream& operator << (std::ostream& out, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>& stce_9776) { out << stce_9776._value(); return out; }
    template<class stce_9753, class stce_9872, class stce_9873 > static inline std::ostream& operator << (std::ostream& out, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>& stce_9776) { out << stce_9776._value(); return out; }
    template<class stce_9753, class stce_9876, class stce_9873 > static inline std::ostream& operator << (std::ostream& out, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>& stce_9776) { out << stce_9776._value(); return out; }
  }
}
namespace dco {
  namespace stce_9847 {
    template<class stce_9774> struct stce_9887 {
      const static bool stce_9888 = true;
    };
    template<class stce_9753, class stce_9877 > struct stce_9887<dco::stce_9847::stce_9864<stce_9753, stce_9877> > { const static bool stce_9888=false; };
    template<class stce_9753, class stce_9876, class stce_9873 > struct stce_9887<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> > { const static bool stce_9888=false; };
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_9887<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> > { const static bool stce_9888=false; };
    template<class stce_9753, class stce_9871, class stce_9873 > struct stce_9887<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> > { const static bool stce_9888=false; };
    template<class stce_9753, class stce_9872, class stce_9873 > struct stce_9887<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> > { const static bool stce_9888=false; };
    template <bool stce_9889, class stce_9890, class stce_9891>
    struct stce_9892 {
      typedef stce_9890 stce_9888;
    };
    template <class stce_9890, class stce_9891>
    struct stce_9892<false, stce_9890, stce_9891> {
      typedef stce_9891 stce_9888;
    };
    template <class stce_9774> struct
        stce_9893 {
      typedef stce_9774 stce_9888;
    };
    template<class stce_9753, class stce_9877 > struct stce_9893<dco::stce_9847::stce_9864<stce_9753, stce_9877> > {typedef dco::stce_9847::stce_9864< typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::VALUE_TYPE, typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::DATA_TYPE> stce_9888; };
    template<class stce_9753, class stce_9876, class stce_9873 > struct stce_9893<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> > {typedef dco::stce_9847::stce_9864< typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::VALUE_TYPE, typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::DATA_TYPE> stce_9888; };
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_9893<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> > {typedef dco::stce_9847::stce_9864< typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::VALUE_TYPE, typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::DATA_TYPE> stce_9888; };
    template<class stce_9753, class stce_9871, class stce_9873 > struct stce_9893<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> > {typedef dco::stce_9847::stce_9864< typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::VALUE_TYPE, typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::DATA_TYPE> stce_9888; };
    template<class stce_9753, class stce_9872, class stce_9873 > struct stce_9893<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> > {typedef dco::stce_9847::stce_9864< typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::VALUE_TYPE, typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::DATA_TYPE> stce_9888; };
    template<class stce_9853, class stce_9854>
    struct stce_9894 {
      typedef typename stce_9892<stce_9887<stce_9853>::stce_9888, stce_9853, typename stce_9893<stce_9853>::stce_9888 >::stce_9888 stce_9895;
      typedef typename stce_9892<stce_9887<stce_9854>::stce_9888, stce_9854, typename stce_9893<stce_9854>::stce_9888 >::stce_9888 stce_9896;
      typedef typename stce_9892<stce_9887<stce_9853>::stce_9888, stce_9896, stce_9895>::stce_9888 stce_9897;
      typedef typename stce_9892<stce_9887<stce_9897>::stce_9888, stce_9853, stce_9897>::stce_9888 type;
    };
    template<class stce_9753, class stce_9877 > static inline typename stce_9894<dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877> >::type max(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9898, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9877 > static inline typename stce_9894<dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9864<stce_9753, stce_9877> >::type min(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9898, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> >::type max(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9898, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9877, class stce_9880, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> >::type min(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9898, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> >::type max(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9898, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9877, class stce_9882, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> >::type min(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9898, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> >::type max(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9898, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9877, class stce_9882, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> >::type min(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9898, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> >::type max(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9898, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9877, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9864<stce_9753, stce_9877>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> >::type min(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9898, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline typename stce_9894<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884> >::type max(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9898, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9876, class stce_9873, class stce_9884 > static inline typename stce_9894<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884> >::type min(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9898, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> >::type max(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9898, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9876, class stce_9873, class stce_9880, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> >::type min(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9898, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> >::type max(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9898, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> >::type min(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9898, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> >::type max(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9898, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9876, class stce_9873, class stce_9882, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> >::type min(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9898, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> >::type max(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9898, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9876, class stce_9873, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> >::type min(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9898, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline typename stce_9894<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884> >::type max(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9884 > static inline typename stce_9894<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884> >::type min(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> >::type max(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> >::type min(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> >::type max(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> >::type min(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> >::type max(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> >::type min(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> >::type max(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> >::type min(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline typename stce_9894<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884> >::type max(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9898, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9871, class stce_9873, class stce_9884 > static inline typename stce_9894<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884> >::type min(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9898, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> >::type max(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9898, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9871, class stce_9873, class stce_9880, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> >::type min(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9898, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> >::type max(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9898, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> >::type min(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9898, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> >::type max(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9898, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9871, class stce_9873, class stce_9882, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> >::type min(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9898, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> >::type max(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9898, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9871, class stce_9873, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> >::type min(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9898, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline typename stce_9894<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884> >::type max(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9872, class stce_9873, class stce_9884 > static inline typename stce_9894<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9864<stce_9753, stce_9884> >::type min(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9864<stce_9753, stce_9884> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> >::type max(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9872, class stce_9873, class stce_9880, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> >::type min(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9850<stce_9753, stce_9880, stce_9881> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> >::type max(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> >::type min(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9855<stce_9753, stce_9882, stce_9883, stce_9881> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> >::type max(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9872, class stce_9873, class stce_9882, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> >::type min(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9860<stce_9753, stce_9882, stce_9881> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> >::type max(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9872, class stce_9873, class stce_9883, class stce_9881 > static inline typename stce_9894<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> >::type min(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9898, const dco::stce_9847::stce_9861<stce_9753, stce_9883, stce_9881> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9877 > static inline typename stce_9894<dco::stce_9847::stce_9864<stce_9753, stce_9877>, stce_9753>::type max(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9898, const stce_9753 &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9877 > static inline typename stce_9894<dco::stce_9847::stce_9864<stce_9753, stce_9877>, stce_9753>::type min(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9898, const stce_9753 &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9876, class stce_9873 > static inline typename stce_9894<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, stce_9753>::type max(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9898, const stce_9753 &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9876, class stce_9873 > static inline typename stce_9894<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>, stce_9753>::type min(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9898, const stce_9753 &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline typename stce_9894<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, stce_9753>::type max(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9898, const stce_9753 &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline typename stce_9894<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>, stce_9753>::type min(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9898, const stce_9753 &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9871, class stce_9873 > static inline typename stce_9894<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, stce_9753>::type max(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9898, const stce_9753 &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9871, class stce_9873 > static inline typename stce_9894<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>, stce_9753>::type min(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9898, const stce_9753 &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9872, class stce_9873 > static inline typename stce_9894<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, stce_9753>::type max(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9898, const stce_9753 &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9872, class stce_9873 > static inline typename stce_9894<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>, stce_9753>::type min(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9898, const stce_9753 &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9877 > static inline typename stce_9894<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877> >::type max(const stce_9753 &stce_9898, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9877 > static inline typename stce_9894<stce_9753, dco::stce_9847::stce_9864<stce_9753, stce_9877> >::type min(const stce_9753 &stce_9898, const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9876, class stce_9873 > static inline typename stce_9894<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> >::type max(const stce_9753 &stce_9898, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9876, class stce_9873 > static inline typename stce_9894<stce_9753, dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> >::type min(const stce_9753 &stce_9898, const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline typename stce_9894<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> >::type max(const stce_9753 &stce_9898, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > static inline typename stce_9894<stce_9753, dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> >::type min(const stce_9753 &stce_9898, const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9871, class stce_9873 > static inline typename stce_9894<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> >::type max(const stce_9753 &stce_9898, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9871, class stce_9873 > static inline typename stce_9894<stce_9753, dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> >::type min(const stce_9753 &stce_9898, const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
    template<class stce_9753, class stce_9872, class stce_9873 > static inline typename stce_9894<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> >::type max(const stce_9753 &stce_9898, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9899) { if (stce_9898 > stce_9899) return stce_9898; else return stce_9899; } template<class stce_9753, class stce_9872, class stce_9873 > static inline typename stce_9894<stce_9753, dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> >::type min(const stce_9753 &stce_9898, const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9899) { if (stce_9898 < stce_9899) return stce_9898; else return stce_9899; }
  }
}
namespace dco {
  namespace stce_9847 {
    template<class stce_9753>
    struct stce_9900 {
      typedef stce_9753 stce_9901;
      stce_9753 stce_9902;
      stce_9900() : stce_9902(0) {}
      stce_9900 &operator = (const stce_9900 &stce_9899) {
        stce_9902 = stce_9899.stce_9902;
        return *this;
      }
      inline void stce_9903(const stce_9753 &stce_9869) {
        stce_9902 = stce_9869;
      }
      inline void stce_9904(stce_9753 &stce_9869) const {
        stce_9869 = stce_9902;
      }
      inline void clear() {
        stce_9902 = 0;
      }
      const stce_9753 &stce_9905() const ;
      stce_9753 &stce_9905() ;
      template<class stce_9906, class stce_9907>
      static inline void stce_9875(const stce_9906 &stce_9870, stce_9907 &stce_9908) {
        stce_9900 &data = const_cast<stce_9900 &>(stce_9908._data());
        data.stce_9902 = stce_9909(stce_9870, 1.0);
      }
      template<class stce_9877 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776, const stce_9753 &pval) {
        return stce_9776._data().stce_9902 * pval;
      }
      template<class stce_9871, class stce_9872, class stce_9873 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776, const stce_9753 &pval) {
        return stce_9909(stce_9776.stce_9856, stce_9776.stce_9858() * pval) + stce_9909(stce_9776.stce_9857, stce_9776.stce_9859() * pval);
      }
      template<class stce_9876, class stce_9873 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776, const stce_9753 &pval) {
        return stce_9909(stce_9776.stce_9852, stce_9776.pval() * pval);
      }
      template<class stce_9871, class stce_9873 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776, const stce_9753 &pval) {
        return stce_9909(stce_9776.stce_9856, stce_9776.stce_9858() * pval);
      }
      template<class stce_9872, class stce_9873 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776, const stce_9753 &pval) {
        return stce_9909(stce_9776.stce_9857, stce_9776.stce_9859() * pval);
      }
      typedef void stce_9910;
      typedef DCO_TAPE_INT stce_9911;
      inline void *stce_9912() const {
        return NULL;
      }
      inline DCO_TAPE_INT _tape_index() const {
        return 0;
      }
    };
  }
}
namespace dco {
  class exception {
  public:
    template <typename stce_9913> static stce_9913 create(std::string stce_9914, std::string stce_9915 = "", int stce_9916 = 0) {
      std::stringstream stce_9917;
      stce_9917 << "--- dco/c++ --- " << stce_9914;
      if (stce_9915 != "") stce_9917 << " --- " << stce_9915 << ":" << stce_9916 << ".";
      DCO_LOG(dco::logERROR) << "EXCEPTION thrown: " << stce_9917.str();
      return stce_9913(stce_9917.str());
    }
  };
}
namespace dco {
  namespace stce_9847 {
    template<class stce_9753, typename stce_9918>
    struct stce_9919 {
      typedef stce_9918 stce_9901;
      static const int stce_9820 = stce_9901::stce_9812;
      stce_9901 tlms;
      stce_9919() {
        for (int stce_9816 = 0; stce_9816 < stce_9820; ++stce_9816) tlms[stce_9816] = 0;
      }
      inline stce_9901 &stce_9905() {
        return tlms;
      }
      inline const stce_9901 &stce_9905() const {
        return tlms;
      }
      inline void stce_9903(const stce_9753 &stce_9869, const int stce_9920) {
        if (stce_9920 >= stce_9820) {
          throw dco::exception::create<std::runtime_error>("Tangent-linear vector size exceeded.");
        }
        tlms[stce_9920] = stce_9869;
      }
      inline void stce_9904(stce_9753 &stce_9869, const int stce_9920) const {
        if (stce_9920 >= stce_9820) {
          throw dco::exception::create<std::runtime_error>("Tangent-linear vector size exceeded.");
        }
        stce_9869 = tlms[stce_9920];
      }
      inline void clear() {
        for (int stce_9816 = 0; stce_9816 < stce_9820; ++stce_9816) {
          tlms[stce_9816] = 0.0;
        }
      }
      template<class stce_9906, class stce_9907>
      static inline void stce_9875(const stce_9906 &stce_9870, stce_9907 &stce_9908) {
        stce_9919 &data = const_cast<stce_9919 &>(stce_9908._data());
        for (int stce_9816 = 0; stce_9816 < stce_9820; ++stce_9816) {
          data.tlms[stce_9816] = stce_9909(stce_9870, 1.0, stce_9816);
        }
      }
      template<class stce_9877 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776, const stce_9753 &pval, const int stce_9920) {
        return stce_9776._data().tlms[stce_9920] * pval;
      }
      template<class stce_9871, class stce_9872, class stce_9873 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776, const stce_9753 &pval, const int stce_9920) {
        return stce_9909(stce_9776.stce_9856, stce_9776.stce_9858() * pval, stce_9920) + stce_9909(stce_9776.stce_9857, stce_9776.stce_9859() * pval, stce_9920);
      }
      template<class stce_9876, class stce_9873 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776, const stce_9753 &pval, const int stce_9920) {
        return stce_9909(stce_9776.stce_9852, stce_9776.pval() * pval, stce_9920);
      }
      template<class stce_9871, class stce_9873 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776, const stce_9753 &pval, const int stce_9920) {
        return stce_9909(stce_9776.stce_9856, stce_9776.stce_9858() * pval, stce_9920);
      }
      template<class stce_9872, class stce_9873 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776, const stce_9753 &pval, const int stce_9920) {
        return stce_9909(stce_9776.stce_9857, stce_9776.stce_9859() * pval, stce_9920);
      }
      typedef void stce_9910;
      typedef DCO_TAPE_INT stce_9911;
      inline void *stce_9912() const {
        return NULL;
      }
      inline DCO_TAPE_INT _tape_index() const {
        return 0;
      }
    };
    template<class stce_9753, typename stce_9918>
    struct stce_9921 {
      typedef stce_9918 stce_9901;
      static const int stce_9820 = stce_9901::stce_9812;
      bool stce_9922;
      stce_9901 tlms;
      stce_9921() : stce_9922(false) {
        for (int stce_9816 = 0; stce_9816 < stce_9820; ++stce_9816) tlms[stce_9816] = 0;
      }
      inline void stce_9903(const stce_9753 &stce_9869, const int stce_9920) {
        if (stce_9920 >= stce_9820) {
          throw dco::exception::create<std::runtime_error>("Tangent-linear vector size exceeded.");
        }
        if (!stce_9922) {
          stce_9922 = true;
        }
        tlms[stce_9920] = stce_9869;
      }
      inline stce_9901 &stce_9905() {
        stce_9922 = true;
        return tlms;
      }
      inline const stce_9901 &stce_9905() const {
        return tlms;
      }
      inline void stce_9904(stce_9753 &stce_9869, const int stce_9920) const {
        if (stce_9920 >= stce_9820) {
          throw dco::exception::create<std::runtime_error>("Tangent-linear vector size exceeded.");
        }
        if (stce_9922) {
          stce_9869 = tlms[stce_9920];
        } else {
          stce_9869 = 0;
        }
      }
      inline void clear() {
        for (int stce_9816 = 0; stce_9816 < stce_9820; ++stce_9816) {
          tlms[stce_9816] = 0.0;
        }
      }
      template<class stce_9906, class stce_9907>
      static inline void stce_9875(const stce_9906 &stce_9870, stce_9907 &stce_9908) {
        stce_9921 &data = const_cast<stce_9921 &>(stce_9908._data());
        bool stce_9923 = stce_9924(stce_9870);
        if (stce_9923) {
          for (int stce_9816 = 0; stce_9816 < stce_9820; ++stce_9816) {
            data.tlms[stce_9816] = stce_9909(stce_9870, 1.0, stce_9816);
          }
          data.stce_9922 = true;
        } else
          data.stce_9922 = false;
      }
      template<class stce_9877 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776, const stce_9753 &pval, const int stce_9920) {
        if (stce_9776._data().stce_9922) {
          return stce_9776._data().tlms[stce_9920] * pval;
        } else
          return 0;
      }
      template<class stce_9871, class stce_9872, class stce_9873 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776, const stce_9753 &pval, const int stce_9920) {
        return stce_9909(stce_9776.stce_9856, stce_9776.stce_9858() * pval, stce_9920) + stce_9909(stce_9776.stce_9857, stce_9776.stce_9859() * pval, stce_9920);
      }
      template<class stce_9876, class stce_9873 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776, const stce_9753 &pval, const int stce_9920) {
        return stce_9909(stce_9776.stce_9852, stce_9776.pval() * pval, stce_9920);
      }
      template<class stce_9871, class stce_9873 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776, const stce_9753 &pval, const int stce_9920) {
        return stce_9909(stce_9776.stce_9856, stce_9776.stce_9858() * pval, stce_9920);
      }
      template<class stce_9872, class stce_9873 >
      static inline stce_9753 stce_9909(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776, const stce_9753 &pval, const int stce_9920) {
        return stce_9909(stce_9776.stce_9857, stce_9776.stce_9859() * pval, stce_9920);
      }
      template<class stce_9877 >
      static inline bool stce_9924(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) {
        return stce_9776._data().stce_9922;
      }
      template<class stce_9871, class stce_9872, class stce_9873 >
      static inline bool stce_9924(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) {
        return stce_9924(stce_9776.stce_9856) || stce_9924(stce_9776.stce_9857);
      }
      template<class stce_9876, class stce_9873 >
      static inline bool stce_9924(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) {
        return stce_9924(stce_9776.stce_9852);
      }
      template<class stce_9871, class stce_9873 >
      static inline bool stce_9924(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) {
        return stce_9924(stce_9776.stce_9856);
      }
      template<class stce_9872, class stce_9873 >
      static inline bool stce_9924(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) {
        return stce_9924(stce_9776.stce_9857);
      }
      typedef void stce_9910;
      typedef DCO_TAPE_INT stce_9911;
      inline void *stce_9912() const {
        return NULL;
      }
      inline DCO_TAPE_INT _tape_index() const {
        return 0;
      }
    };
  }
}
namespace dco {
  namespace stce_9847 {
    template<size_t size, class stce_9753>
    struct stce_9925 {
      typedef std::bitset<size> stce_9926;
      stce_9926 stce_9927;
      stce_9925() {}
      stce_9925 &operator = (const stce_9925 &stce_9899) {
        stce_9927 = stce_9899.stce_9927;
        return *this;
      }
      inline void stce_9903(const size_t &stce_9817) {
        stce_9927.set(stce_9817);
      }
      inline bool stce_9904(const size_t &stce_9817) const {
        return stce_9927[stce_9817];
      }
      inline void clear() {
        stce_9927.reset();
      }
      template<class stce_9906, class stce_9907>
      static inline void stce_9875(const stce_9906 &stce_9870, stce_9907 &stce_9908) {
        stce_9925 &data = const_cast<stce_9925 &>(stce_9908._data());
        data.stce_9927.reset();
        stce_9928(stce_9870, data.stce_9927);
      }
      template<class stce_9877 >
      static inline void stce_9928(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776, stce_9926 &stce_9908) {
        stce_9908 |= stce_9776._data().stce_9927;
      }
      template<class stce_9871, class stce_9872, class stce_9873 >
      static inline void stce_9928(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776, stce_9926 &stce_9908) {
        stce_9928(stce_9776.stce_9856, stce_9908);
        stce_9928(stce_9776.stce_9857, stce_9908);
      }
      template<class stce_9876, class stce_9873 >
      static inline void stce_9928(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776, stce_9926 &stce_9908) {
        stce_9928(stce_9776.stce_9852, stce_9908);
      }
      template<class stce_9871, class stce_9873 >
      static inline void stce_9928(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776, stce_9926 &stce_9908) {
        stce_9928(stce_9776.stce_9856, stce_9908);
      }
      template<class stce_9872, class stce_9873 >
      static inline void stce_9928(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776, stce_9926 &stce_9908) {
        stce_9928(stce_9776.stce_9857, stce_9908);
      }
    };
  }
}
namespace dco {
  enum stce_9929 {
    memory_chunks,
    stce_9930,
    file_io_chunks
  };
  namespace stce_9847 {
    class tape_options {
    private:
      size_t stce_9931;
      DCO_TAPE_INT stce_9932;
      stce_9929 stce_9933;
      bool stce_9934;
      std::string stce_9935;
      int stce_9936;
      int stce_9937;
      FILE *stce_9938;
      DCO_TAPE_INT stce_9939;
    public:
      tape_options() : stce_9931(DCO_CHUNK_SIZE), stce_9932(0),
        stce_9933(memory_chunks), stce_9934(false),
        stce_9935("dco_tape_data.bin"), stce_9936(0),
        stce_9937(-1), stce_9938(NULL), stce_9939(0) {
        stce_9936 = MAP_FILE | MAP_SHARED | MAP_POPULATE;
      }
      inline size_t &chunksize() {
        return stce_9931;
      }
      inline const size_t &chunksize() const {
        return stce_9931;
      }
      inline DCO_TAPE_INT &tapesize() {
        return stce_9939;
      }
      inline const DCO_TAPE_INT &tapesize() const {
        return stce_9939;
      }
      inline int &mmap_flags() {
        return stce_9936;
      }
      inline const int &mmap_flags() const {
        return stce_9936;
      }
      inline DCO_TAPE_INT &number_of_preallocated_chunks() {
        return stce_9932;
      }
      inline const DCO_TAPE_INT &number_of_preallocated_chunks() const {
        return stce_9932;
      }
      inline stce_9929 &chunk_type() {
        return stce_9933;
      }
      inline const stce_9929 &chunk_type() const {
        return stce_9933;
      }
      inline std::string chunk_type_as_string() const {
        if (stce_9933 == memory_chunks) return "memory chunks";
        if (stce_9933 == stce_9930) return "mmap chunks";
        if (stce_9933 == file_io_chunks) return "file io chunks";
        return "unknown chunks";
      }
      inline bool &deallocation_on_reset() {
        return stce_9934;
      }
      inline const bool &deallocation_on_reset() const {
        return stce_9934;
      }
      inline std::string &filename() {
        return stce_9935;
      }
      inline const std::string &filename() const {
        return stce_9935;
      }
      inline FILE *&stce_9940() {
        return stce_9938;
      }
      inline FILE *stce_9940() const {
        return stce_9938;
      }
      inline bool stce_9941() const {
        return (stce_9938 != 0);
      }
      inline int &stce_9942() {
        return stce_9937;
      }
      inline const int &stce_9942() const {
        return stce_9937;
      }
    };
  }
}
namespace dco {
  namespace stce_9847 {
    template <typename stce_9753, class stce_9943> struct stce_9944;
    template <typename stce_9753, class stce_9943> struct stce_9945;
  }
  namespace helper {
    template<typename stce_9946>
    class stce_9947 {
      template<typename stce_9753, typename stce_9943> friend struct dco::stce_9847::stce_9944;
      template<typename stce_9753, typename stce_9943> friend struct dco::stce_9847::stce_9945;
    protected:
      inline virtual ~stce_9947() {
      }
      stce_9946 *stce_9948;
    public:
      inline void stce_9949(stce_9946 *stce_9950) {
        if (stce_9948 != 0) return;
        else stce_9948 = stce_9950;
      }
      inline stce_9946 *get_tape() {
        return stce_9948;
      }
      inline stce_9947() : stce_9948(0) { }
      inline virtual void stce_9951(stce_9830 &stce_9831, DCO_TAPE_INT stce_9839) {
        (void)stce_9831;
        (void)stce_9839;
      }
      inline virtual double get_memory_size() {
        return sizeof(stce_9946);
      }
    };
    template<class stce_9952, class stce_9946>
    class stce_9953 : public stce_9947<stce_9946> {
    private:
      class stce_9954 {
      public:
        virtual ~stce_9954() {};
        virtual double size() = 0;
      };
      template <typename stce_9955>
      class stce_9956 : public stce_9954 {
      public:
        const stce_9955 _data;
        stce_9956(const stce_9955 &stce_9957) : _data(stce_9957) {}
        const stce_9955 &stce_9958() const {
          return _data;
        }
      };
      template <typename stce_9955>
      class stce_9959 : public stce_9956<stce_9955> {
      public:
        stce_9959(stce_9955 data) : stce_9956<stce_9955>(data) {}
        virtual ~stce_9959() { }
        virtual double size() {
          return sizeof(stce_9955);
        }
      };
      template <typename stce_9955>
      class stce_9960 : public stce_9956<stce_9955 *> {
      public:
        const int stce_9961;
        stce_9960(const stce_9955 *data, int stce_9962) : stce_9956<stce_9955 *>(new stce_9955[stce_9962]), stce_9961(stce_9962) {
          for (int stce_9816 = 0; stce_9816 < stce_9962; ++stce_9816)
            this->_data[stce_9816] = data[stce_9816];
        }
        stce_9960(const stce_9955 *data, const int stce_9963, const int stce_9962) : stce_9956<stce_9955 *>(new stce_9955[stce_9962]), stce_9961(stce_9962) {
          for (int stce_9816 = 0, stce_9817 = 0; stce_9816 < stce_9962; ++stce_9816, stce_9817 += stce_9963)
            this->_data[stce_9816] = data[stce_9817];
        }
        virtual ~stce_9960() {
          delete [] this->_data;
        }
        virtual double size() {
          return stce_9961 * sizeof(stce_9955);
        }
      };
      unsigned int stce_9964;
      std::vector<stce_9954 *> stce_9965;
    protected:
      virtual ~stce_9953() {
        for (unsigned int stce_9816 = 0; stce_9816 < stce_9965.size(); stce_9816++)
          delete stce_9965[stce_9816];
        stce_9965.clear();
      }
    public:
      stce_9953(): stce_9947<stce_9946>(), stce_9964(0) {}
      inline virtual double get_memory_size() {
        double stce_9917 = stce_9947<stce_9946>::get_memory_size();
        for (unsigned int stce_9816 = 0; stce_9816 < stce_9965.size(); stce_9816++)
          stce_9917 += stce_9965[stce_9816]->size();
        return stce_9917;
      }
      template<typename stce_9955>
      inline void write_data(const stce_9955 &stce_9966) {
        stce_9965.push_back(new stce_9959<stce_9955>(stce_9966));
      }
      template<typename stce_9955>
      inline void write_data(const stce_9955 *const stce_9966, const int stce_9962) {
        stce_9965.push_back(new stce_9960<stce_9955>(stce_9966, stce_9962));
      }
      template<typename stce_9955>
      inline void write_data(const stce_9955 *const &stce_9966, const int stce_9963, const int stce_9962) {
        stce_9965.push_back(new stce_9960<stce_9955>(stce_9966, stce_9963, stce_9962));
      }
      template<typename stce_9955>
      inline const stce_9955 &read_data() {
        const stce_9955 &stce_9966 = static_cast<stce_9956<stce_9955>* >(stce_9965[stce_9964])->stce_9958();
        ++stce_9964;
        if (static_cast<size_t>(stce_9964) == stce_9965.size()) stce_9964 = 0;
        return stce_9966;
      }
    };
    template<class stce_9952, class stce_9946>
    class stce_9967 : public stce_9953<stce_9952, stce_9946> {
    protected:
      std::vector<DCO_TAPE_INT> stce_9837;
      std::vector<DCO_TAPE_INT> stce_9838;
      DCO_TAPE_INT stce_9968;
      DCO_TAPE_INT stce_9969;
    public:
      inline size_t stce_9970() {
        return stce_9837.size();
      }
      inline size_t stce_9971() {
        return stce_9838.size();
      }
      inline void stce_9951(stce_9830 &stce_9831, DCO_TAPE_INT stce_9839) {
        stce_9831.stce_9836(stce_9837, stce_9838, stce_9839 - static_cast<DCO_TAPE_INT>(stce_9838.size()) - 1);
      }
    public:
      inline void stce_9972(const stce_9952 &stce_9776) {
        if ((stce_9776._data().stce_9912() != 0) && (this->stce_9948 != stce_9776._data().stce_9912()))
          throw dco::exception::create<std::runtime_error>("impossible binding tape - wrong tape in variable!");
      }
    protected:
      ~stce_9967() { }
    public:
      stce_9967(const std::pair<int, int> &stce_9898): stce_9953<stce_9952, stce_9946>(),
        stce_9968(0),
        stce_9969(0) {
        stce_9837.reserve(stce_9898.first);
        stce_9838.reserve(stce_9898.second);
      }
      stce_9967(): stce_9953<stce_9952, stce_9946>(), stce_9968(0), stce_9969(0) {
      }
      inline typename stce_9952::VALUE_TYPE register_input(const stce_9952 &stce_9776) {
        stce_9972(stce_9776);
        stce_9837.push_back(stce_9776._data()._tape_index());
        return stce_9776._value();
      }
      inline void register_input(const stce_9952 *const stce_9776, typename stce_9952::VALUE_TYPE *stce_9973, const int stce_9962) {
        DCO_TAPE_INT stce_9974 = stce_9837.size();
        stce_9837.resize(stce_9974 + stce_9962);
        DCO_TAPE_INT *stce_9975 = &stce_9837[stce_9974];
        int stce_9816;
        for (stce_9816 = 0; stce_9816 < stce_9962; ++stce_9816) {
          stce_9972(stce_9776[stce_9816]);
          stce_9975[stce_9816] = stce_9776[stce_9816]._data()._tape_index();
          stce_9973[stce_9816] = stce_9776[stce_9816]._value();
        }
      }
      inline void register_input(const std::vector<stce_9952> &stce_9776, std::vector<typename stce_9952::VALUE_TYPE> &stce_9973) {
        assert(stce_9776.size() == stce_9973.size());
        register_input(&(stce_9776[0]), &(stce_9973[0]), stce_9776.size());
      }
      inline std::vector<typename stce_9952::VALUE_TYPE> register_input(const std::vector<stce_9952> &stce_9776) {
        std::vector<typename stce_9952::VALUE_TYPE> stce_9973(stce_9776.size());
        register_input(stce_9776, stce_9973);
        return stce_9973;
      }
      inline void register_output(stce_9952 *stce_9976, const size_t stce_9962) {
        if (this->stce_9948 == NULL) {
          throw dco::exception::create<std::runtime_error>("impossible binding output - no tape available");
        } else {
          DCO_TAPE_INT stce_9974 = stce_9838.size();
          stce_9838.resize(stce_9974 + stce_9962);
          DCO_TAPE_INT *stce_9977 = &stce_9838[ stce_9974 ];
          size_t stce_9978 = 0;
          typename stce_9946::TAPE_ENTRY *stce_9979 = this->stce_9948->stce_9980(stce_9962, stce_9978);
          for (size_t stce_9816 = 0; stce_9816 < stce_9962; ++stce_9816) {
            stce_9979[stce_9816].arg = 0;
            typename stce_9952::DATA_TYPE &data = stce_9976[stce_9816]._data();
            data.register_variable(stce_9978 + stce_9816, this->stce_9948);
            stce_9977[stce_9816] = static_cast<DCO_TAPE_INT>(stce_9978 + stce_9816);
          }
        }
      }
      inline void register_output(const typename stce_9952::VALUE_TYPE *const stce_9981, stce_9952 *stce_9976, const size_t stce_9962) {
        if (this->stce_9948 == NULL) {
          throw dco::exception::create<std::runtime_error>("impossible binding output - no tape available");
        } else {
          DCO_TAPE_INT stce_9974 = stce_9838.size();
          stce_9838.resize(stce_9974 + stce_9962);
          DCO_TAPE_INT *stce_9977 = &stce_9838[ stce_9974 ];
          size_t stce_9978 = 0;
          typename stce_9946::TAPE_ENTRY *stce_9979 = this->stce_9948->stce_9980(stce_9962, stce_9978);
          for (size_t stce_9816 = 0; stce_9816 < stce_9962; ++stce_9816) {
            stce_9979[stce_9816].arg = 0;
            stce_9976[stce_9816] = stce_9981[stce_9816];
            typename stce_9952::DATA_TYPE &data = const_cast<typename stce_9952::DATA_TYPE &>(stce_9976[stce_9816]._data());
            data.register_variable(stce_9978 + stce_9816, this->stce_9948);
            stce_9977[stce_9816] = static_cast<DCO_TAPE_INT>(stce_9978 + stce_9816);
          }
        }
      }
      inline void register_output(const std::vector<typename stce_9952::VALUE_TYPE> &stce_9981, std::vector<stce_9952> &stce_9976) {
        assert(stce_9981.size() == stce_9976.size());
        register_output(&(stce_9981[0]), &(stce_9976[0]), stce_9981.size());
      }
      inline std::vector<stce_9952> register_output(const std::vector<typename stce_9952::VALUE_TYPE> &stce_9981) {
        std::vector<stce_9952> stce_9976(stce_9981.size());
        register_output(stce_9981, stce_9976);
        return stce_9976;
      }
      inline void register_output(std::vector<stce_9952> &stce_9976) {
        register_output(&(stce_9976[0]), stce_9976.size());
      }
      inline stce_9952 register_output(const typename stce_9952::VALUE_TYPE &stce_9982, stce_9946 *tape = NULL) {
        stce_9952 stce_9983;
        if (tape != NULL) {
          if (this->stce_9948 != NULL && this->stce_9948 != tape) {
            throw dco::exception::create<std::runtime_error>("impossible binding output in external function (register_output) - tape of inputs and outputs differ!");
          }
          this->stce_9948 = tape;
        }
        if (this->stce_9948 != NULL) {
          stce_9983 = stce_9982;
          this->stce_9948->register_variable(stce_9983);
        } else
          throw dco::exception::create<std::runtime_error>("impossible binding output in external function - no tape available");
        stce_9838.push_back(stce_9983._data()._tape_index());
        return stce_9983;
      }
      inline typename stce_9952::VALUE_TYPE get_output_adjoint() {
        DCO_TAPE_INT stce_9817 = stce_9969;
        stce_9969++;
        if (static_cast<size_t>(stce_9969) == stce_9838.size())
          stce_9969 = 0;
        typename stce_9952::VALUE_TYPE back = 0;
        back = this->stce_9948->stce_9984(stce_9838[static_cast<size_t>(stce_9817)]);
        return back;
      }
      inline void get_output_adjoint(typename stce_9952::VALUE_TYPE *stce_9985, const size_t stce_9962) {
        DCO_TAPE_INT stce_9817 = stce_9969;
        for (size_t stce_9816 = 0; stce_9816 < stce_9962; ++stce_9816) {
          stce_9985[stce_9816] = this->stce_9948->_adjoint(stce_9838[stce_9817]);
          stce_9817++;
        }
        stce_9969 += stce_9962;
        if (static_cast<size_t>(stce_9969) == stce_9838.size())
          stce_9969 = 0;
      }
      inline void get_output_adjoint(std::vector<typename stce_9952::VALUE_TYPE> &stce_9985) {
        assert(stce_9985.size());
        get_output_adjoint(&(stce_9985[0]), stce_9985.size());
      }
      inline void increment_input_adjoint(const typename stce_9952::VALUE_TYPE *const stce_9986, const int stce_9962) {
        for (int stce_9816 = 0; stce_9816 < stce_9962; ++stce_9816) {
          this->stce_9948->_adjoint(stce_9837[stce_9968 + stce_9816]) += stce_9986[stce_9816];
        }
        stce_9968 += stce_9962;
        if (static_cast<size_t>(stce_9968) == stce_9837.size())
          stce_9968 = 0;
      }
      inline void increment_input_adjoint(const std::vector<typename stce_9952::VALUE_TYPE> &stce_9986) {
        assert(stce_9986.size() != 0);
        increment_input_adjoint(&(stce_9986[0]), stce_9986.size());
      }
      inline bool stce_9987() {
        if (stce_9968 == 0) return true;
        else return false;
      }
      inline bool stce_9988() {
        if (stce_9969 == 0) return true;
        else return false;
      }
      inline void increment_input_adjoint(const typename stce_9952::VALUE_TYPE &stce_9986) {
        DCO_TAPE_INT stce_9817 = stce_9968;
        stce_9968++;
        if (static_cast<size_t>(stce_9968) == stce_9837.size())
          stce_9968 = 0;
        this->stce_9948->stce_9984(stce_9837[static_cast<size_t>(stce_9817)]) += stce_9986;
      }
    };
  }
}
namespace dco {
  class timer {
  private:
    double stce_9989;
    timespec stce_9990;
    timespec stce_9991(const timespec stce_9992, const timespec end) const {
      timespec stce_9993;
      if ((end.tv_nsec - stce_9992.tv_nsec) < 0) {
        stce_9993.tv_sec = end.tv_sec - stce_9992.tv_sec - 1;
        stce_9993.tv_nsec = 1000000000 + end.tv_nsec - stce_9992.tv_nsec;
      } else {
        stce_9993.tv_sec = end.tv_sec - stce_9992.tv_sec;
        stce_9993.tv_nsec = end.tv_nsec - stce_9992.tv_nsec;
      }
      return stce_9993;
    }
  public:
    static void sleep(const double stce_9994) {
      usleep(static_cast<useconds_t>(stce_9994 * 1000 * 1000));
    };
    void start() {
      stce_9989 = 0.0;
      clock_gettime(0, &stce_9990);
    }
    void stop() {
      timespec stce_9995, stce_9996;
      clock_gettime(0, &stce_9995);
      stce_9996 = stce_9991(stce_9990, stce_9995);
      stce_9990 = stce_9995;
      stce_9989 += static_cast<double>(stce_9996.tv_sec) + static_cast<double>(stce_9996.tv_nsec) * 1e-9;
    }
    void restart() {
      start();
    }
    double get() {
      return stce_9989;
    }
    double elapsed() {
      stop();
      return get();
    }
  };
}
namespace dco {
  template< typename stce_9774 > struct stce_9997 {
    typedef stce_9774 stce_9998;
    static inline stce_9998 &value(stce_9774 &value) {
      return value;
    }
  };
  template<class stce_9753, class stce_9877 > struct stce_9997 <dco::stce_9847::stce_9864<stce_9753, stce_9877> >{ typedef typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::VALUE_TYPE stce_9998; static inline stce_9998& value(dco::stce_9847::stce_9864<stce_9753, stce_9877> &value) { return value._value(); } }; template<class stce_9753, class stce_9877 > struct stce_9997 <const dco::stce_9847::stce_9864<stce_9753, stce_9877> >{ typedef const typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::VALUE_TYPE stce_9998; static inline stce_9998& value(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &value) { return value._value(); } }; template<class stce_9753, class stce_9876, class stce_9873 > struct stce_9997 <dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> >{ typedef typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::VALUE_TYPE stce_9998; static inline stce_9998& value(dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &value) { return value._value(); } }; template<class stce_9753, class stce_9876, class stce_9873 > struct stce_9997 <const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> >{ typedef const typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::VALUE_TYPE stce_9998; static inline stce_9998& value(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &value) { return value._value(); } }; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_9997 <dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> >{ typedef typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::VALUE_TYPE stce_9998; static inline stce_9998& value(dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &value) { return value._value(); } }; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_9997 <const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> >{ typedef const typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::VALUE_TYPE stce_9998; static inline stce_9998& value(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &value) { return value._value(); } }; template<class stce_9753, class stce_9871, class stce_9873 > struct stce_9997 <dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> >{ typedef typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::VALUE_TYPE stce_9998; static inline stce_9998& value(dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &value) { return value._value(); } }; template<class stce_9753, class stce_9871, class stce_9873 > struct stce_9997 <const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> >{ typedef const typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::VALUE_TYPE stce_9998; static inline stce_9998& value(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &value) { return value._value(); } }; template<class stce_9753, class stce_9872, class stce_9873 > struct stce_9997 <dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> >{ typedef typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::VALUE_TYPE stce_9998; static inline stce_9998& value(dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &value) { return value._value(); } }; template<class stce_9753, class stce_9872, class stce_9873 > struct stce_9997 <const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> >{ typedef const typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::VALUE_TYPE stce_9998; static inline stce_9998& value(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &value) { return value._value(); } };
  template <typename stce_9774>
  inline typename stce_9997<stce_9774>::stce_9998 &value(stce_9774 &stce_9776) {
    return stce_9997<stce_9774>::value(stce_9776);
  }
  template <typename stce_9774>
  inline typename stce_9997<const stce_9774>::stce_9998 &value(const stce_9774 &stce_9776) {
    return stce_9997<const stce_9774>::value(stce_9776);
  }
  template< typename stce_9774 > struct stce_9999 : stce_9997<stce_9774> {};
  template<class stce_9753, class stce_9877 > struct stce_9999 <dco::stce_9847::stce_9864<stce_9753, stce_9877> >{ typedef typename stce_9999<typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::VALUE_TYPE>::stce_9998 stce_9998; static inline stce_9998& value(dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) { return stce_9999<typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::VALUE_TYPE>::value(dco::value(stce_9776)); } }; template<class stce_9753, class stce_9877 > struct stce_9999 <const dco::stce_9847::stce_9864<stce_9753, stce_9877> >{ typedef const typename stce_9999<typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::VALUE_TYPE>::stce_9998 stce_9998; static inline stce_9998& value(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) { return stce_9999<const typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::VALUE_TYPE>::value(dco::value(stce_9776)); } }; template<class stce_9753, class stce_9876, class stce_9873 > struct stce_9999 <dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> >{ typedef typename stce_9999<typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::VALUE_TYPE>::stce_9998 stce_9998; static inline stce_9998& value(dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) { return stce_9999<typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::VALUE_TYPE>::value(dco::value(stce_9776)); } }; template<class stce_9753, class stce_9876, class stce_9873 > struct stce_9999 <const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> >{ typedef const typename stce_9999<typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::VALUE_TYPE>::stce_9998 stce_9998; static inline stce_9998& value(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) { return stce_9999<const typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::VALUE_TYPE>::value(dco::value(stce_9776)); } }; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_9999 <dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> >{ typedef typename stce_9999<typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::VALUE_TYPE>::stce_9998 stce_9998; static inline stce_9998& value(dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) { return stce_9999<typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::VALUE_TYPE>::value(dco::value(stce_9776)); } }; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_9999 <const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> >{ typedef const typename stce_9999<typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::VALUE_TYPE>::stce_9998 stce_9998; static inline stce_9998& value(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) { return stce_9999<const typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::VALUE_TYPE>::value(dco::value(stce_9776)); } }; template<class stce_9753, class stce_9871, class stce_9873 > struct stce_9999 <dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> >{ typedef typename stce_9999<typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::VALUE_TYPE>::stce_9998 stce_9998; static inline stce_9998& value(dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) { return stce_9999<typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::VALUE_TYPE>::value(dco::value(stce_9776)); } }; template<class stce_9753, class stce_9871, class stce_9873 > struct stce_9999 <const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> >{ typedef const typename stce_9999<typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::VALUE_TYPE>::stce_9998 stce_9998; static inline stce_9998& value(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) { return stce_9999<const typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::VALUE_TYPE>::value(dco::value(stce_9776)); } }; template<class stce_9753, class stce_9872, class stce_9873 > struct stce_9999 <dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> >{ typedef typename stce_9999<typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::VALUE_TYPE>::stce_9998 stce_9998; static inline stce_9998& value(dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) { return stce_9999<typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::VALUE_TYPE>::value(dco::value(stce_9776)); } }; template<class stce_9753, class stce_9872, class stce_9873 > struct stce_9999 <const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> >{ typedef const typename stce_9999<typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::VALUE_TYPE>::stce_9998 stce_9998; static inline stce_9998& value(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) { return stce_9999<const typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::VALUE_TYPE>::value(dco::value(stce_9776)); } };
  template <typename stce_9774>
  inline typename stce_9999<stce_9774>::stce_9998 &passive_value(stce_9774 &stce_9776) {
    return stce_9999<stce_9774>::value(stce_9776);
  }
  template <typename stce_9774>
  inline const typename stce_9999<stce_9774>::stce_9998 &passive_value(const stce_9774 &stce_9776) {
    return stce_9999<const stce_9774>::value(stce_9776);
  }
  template< typename stce_9774 > struct stce_10000 {
    typedef stce_9774 stce_9998;
    static inline stce_9998 value(const stce_9774 &stce_10001) {
      (void) stce_10001;
      return stce_9998();
    }
  };
  template<class stce_9753, class stce_9877 > struct stce_10000 <dco::stce_9847::stce_9864<stce_9753, stce_9877> >{ typedef typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::DATA_TYPE::stce_9901& stce_9998; static inline stce_9998 value(dco::stce_9847::stce_9864<stce_9753, stce_9877> &value) { return value._data().stce_9905(); } }; template<class stce_9753, class stce_9877 > struct stce_10000 <const dco::stce_9847::stce_9864<stce_9753, stce_9877> >{ typedef typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::DATA_TYPE::stce_9901& stce_9998; static inline stce_9998 value(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &value) { return const_cast<stce_9998>(value._data().stce_9905()); } }; template<class stce_9753, class stce_9876, class stce_9873 > struct stce_10000 <dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> >; template<class stce_9753, class stce_9876, class stce_9873 > struct stce_10000 <const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> >; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_10000 <dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> >; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_10000 <const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> >; template<class stce_9753, class stce_9871, class stce_9873 > struct stce_10000 <dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> >; template<class stce_9753, class stce_9871, class stce_9873 > struct stce_10000 <const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> >; template<class stce_9753, class stce_9872, class stce_9873 > struct stce_10000 <dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> >; template<class stce_9753, class stce_9872, class stce_9873 > struct stce_10000 <const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> >;
  template <typename stce_9774>
  inline typename stce_10000<stce_9774>::stce_9998 derivative(stce_9774 &stce_9776) {
    return stce_10000<stce_9774>::value(stce_9776);
  }
  template <typename stce_9774>
  inline typename stce_10000<const stce_9774>::stce_9998 derivative(const stce_9774 &stce_9776) {
    return stce_10000<const stce_9774>::value(stce_9776);
  }
  template <typename stce_10002>
  struct stce_10003 {
    typedef stce_10002 stce_9825;
  };
  template <typename stce_9774>
  struct stce_10003<std::vector<stce_9774> > {
    typedef std::vector<stce_9774> &stce_9825;
  };
  template<class stce_9774, typename stce_10002 = std::vector<stce_9774> >
  struct stce_10004 {
    typename stce_10003<stce_10002>::stce_9825 stce_10005;
    stce_10004(typename stce_10003<stce_10002>::stce_9825 stce_9822) : stce_10005(stce_9822) {}
    stce_10004 &operator = (const std::vector<typename stce_9774::VALUE_TYPE> &stce_10006) {
      for (size_t stce_9816 = 0; stce_9816 < stce_10005.size(); ++stce_9816) {
        dco::derivative(stce_10005[stce_9816]) = stce_10006[stce_9816];
      }
      return *this;
    }
    operator std::vector<typename stce_9774::VALUE_TYPE>() const {
      std::vector<typename stce_9774::VALUE_TYPE> stce_9823;
      for (size_t stce_9816 = 0; stce_9816 < stce_10005.size(); ++stce_9816) {
        stce_9823.push_back(dco::derivative(stce_10005[stce_9816]));
      }
      return stce_9823;
    }
    typename stce_10000<stce_9774>::stce_9998 &operator[](size_t stce_9816) {
      return dco::derivative(stce_10005[stce_9816]);
    }
    const typename stce_10000<stce_9774>::stce_9998 &operator[](size_t stce_9816) const {
      return dco::derivative(stce_10005[stce_9816]);
    }
    size_t size() const {
      return stce_10005.size();
    }
  };
  template<class stce_9774, typename stce_10002 = std::vector<stce_9774> >
  struct stce_10007 {
    typename stce_10003<stce_10002>::stce_9825 stce_10005;
    stce_10007(typename stce_10003<stce_10002>::stce_9825 stce_9822) : stce_10005(stce_9822) { }
    stce_10007 &operator = (const std::vector<typename stce_9774::VALUE_TYPE> &stce_10006) {
      for (size_t stce_9816 = 0; stce_9816 < stce_10005.size(); ++stce_9816) {
        dco::value(stce_10005[stce_9816]) = stce_10006[stce_9816];
      }
      return *this;
    }
    operator std::vector<typename stce_9774::VALUE_TYPE>() const {
      std::vector<typename stce_9774::VALUE_TYPE> stce_9823;
      for (size_t stce_9816 = 0; stce_9816 < stce_10005.size(); ++stce_9816) {
        stce_9823.push_back(dco::value(stce_10005[stce_9816]));
      }
      return stce_9823;
    }
    typename stce_9997<stce_9774>::stce_9998 &operator[](size_t stce_9816) {
      return dco::value(stce_10005[stce_9816]);
    }
    const typename stce_9997<stce_9774>::stce_9998 &operator[](size_t stce_9816) const {
      return dco::value(stce_10005[stce_9816]);
    }
    size_t size() const {
      return stce_10005.size();
    }
  };
  template<class stce_9774>
  struct stce_10008 {
    std::vector<stce_9774> &stce_10005;
    stce_10008(std::vector<stce_9774> &stce_9822) : stce_10005(stce_9822) {}
    stce_10008 &operator = (std::vector<typename stce_9774::VALUE_TYPE> &stce_10006) {
      for (size_t stce_9816 = 0; stce_9816 < stce_10005.size(); ++stce_9816) {
        dco::passive_value(stce_10005[stce_9816]) = stce_10006[stce_9816];
      }
      return *this;
    }
    operator std::vector<typename stce_9774::VALUE_TYPE>() const {
      std::vector<typename stce_9774::VALUE_TYPE> stce_9823;
      for (size_t stce_9816 = 0; stce_9816 < stce_10005.size(); ++stce_9816) {
        stce_9823.push_back(dco::passive_value(stce_10005[stce_9816]));
      }
      return stce_9823;
    }
    typename stce_9999<stce_9774>::stce_9998 &operator[](size_t stce_9816) {
      return dco::passive_value(stce_10005[stce_9816]);
    }
  };
  template<class stce_9774>
  stce_10004<stce_9774> derivative(std::vector<stce_9774> &stce_9822) {
    return stce_10004<stce_9774>(stce_9822);
  }
  template<class stce_9774, class stce_10002>
  stce_10004<typename stce_9774::VALUE_TYPE, stce_10007<stce_9774, stce_10002> > derivative(const stce_10007<stce_9774, stce_10002> &stce_9822) {
    return stce_10004<typename stce_9774::VALUE_TYPE, stce_10007<stce_9774, stce_10002> >(stce_9822);
  }
  template<class stce_9774, class stce_10002>
  stce_10004<typename stce_9774::VALUE_TYPE, stce_10004<stce_9774, stce_10002> > derivative(const stce_10004<stce_9774, stce_10002> &stce_9822) {
    return stce_10004<typename stce_9774::VALUE_TYPE, stce_10004<stce_9774, stce_10002> >(stce_9822);
  }
  template<class stce_9774>
  stce_10007<stce_9774> value(std::vector<stce_9774> &stce_9822) {
    return stce_10007<stce_9774>(stce_9822);
  }
  template<class stce_9774, class stce_10002>
  stce_10007<typename stce_9774::VALUE_TYPE, stce_10007<stce_9774, stce_10002> > value(const stce_10007<stce_9774, stce_10002> &stce_9822) {
    return stce_10007<typename stce_9774::VALUE_TYPE, stce_10007<stce_9774, stce_10002> >(stce_9822);
  }
  template<class stce_9774, class stce_10002>
  stce_10007<typename stce_9774::VALUE_TYPE, stce_10004<stce_9774, stce_10002> > value(const stce_10004<stce_9774, stce_10002> &stce_9822) {
    return stce_10007<typename stce_9774::VALUE_TYPE, stce_10004<stce_9774, stce_10002> >(stce_9822);
  }
  template<class stce_9774>
  stce_10008<stce_9774> passive_value(std::vector<stce_9774> &stce_9822) {
    return stce_10008<stce_9774>(stce_9822);
  }
  template< typename stce_9774 > struct stce_10009 {
    typedef void *stce_9998;
    static inline stce_9998 value(const stce_9774 &stce_10001) {
      (void) stce_10001;
      return static_cast<void *>(0);
    }
  };
  template<class stce_9753, class stce_9877 > struct stce_10009 <dco::stce_9847::stce_9864<stce_9753, stce_9877> >{ typedef typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::DATA_TYPE::stce_9910* stce_9998; static inline stce_9998 value(dco::stce_9847::stce_9864<stce_9753, stce_9877> &value) { return value._data().stce_9912(); } }; template<class stce_9753, class stce_9877 > struct stce_10009 <const dco::stce_9847::stce_9864<stce_9753, stce_9877> >{ typedef typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::DATA_TYPE::stce_9910* stce_9998; static inline stce_9998 value(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &value) { return value._data().stce_9912(); } }; template<class stce_9753, class stce_9877 > struct stce_10009 <std::vector<dco::stce_9847::stce_9864<stce_9753, stce_9877> > >{ typedef typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::DATA_TYPE::stce_9910* stce_9998; static inline stce_9998 value(std::vector<dco::stce_9847::stce_9864<stce_9753, stce_9877> > &value) { stce_9998 tape = 0; for (size_t stce_9816 = 0; stce_9816 < value.size(); stce_9816++) { if (stce_10009<dco::stce_9847::stce_9864<stce_9753, stce_9877> >::value(value[stce_9816]) != 0) { tape = stce_10009<dco::stce_9847::stce_9864<stce_9753, stce_9877> >::value(value[stce_9816]); break; } } return tape; } }; template<class stce_9753, class stce_9877 > struct stce_10009 <const std::vector<dco::stce_9847::stce_9864<stce_9753, stce_9877> > >{ typedef typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::DATA_TYPE::stce_9910* stce_9998; static inline stce_9998 value(const std::vector<dco::stce_9847::stce_9864<stce_9753, stce_9877> > &value) { stce_9998 tape = 0; for (size_t stce_9816 = 0; stce_9816 < value.size(); stce_9816++) { if (stce_10009<const dco::stce_9847::stce_9864<stce_9753, stce_9877> >::value(value[stce_9816]) != 0) { tape = stce_10009<const dco::stce_9847::stce_9864<stce_9753, stce_9877> >::value(value[stce_9816]); break; } } return tape; } }; template<class stce_9753, class stce_9876, class stce_9873 > struct stce_10009 <dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> >{ typedef typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::DATA_TYPE::stce_9910* stce_9998; static inline stce_9998 value(dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &value) { return value._data().stce_9912(); } }; template<class stce_9753, class stce_9876, class stce_9873 > struct stce_10009 <const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> >{ typedef typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::DATA_TYPE::stce_9910* stce_9998; static inline stce_9998 value(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &value) { return value._data().stce_9912(); } }; template<class stce_9753, class stce_9876, class stce_9873 > struct stce_10009 <std::vector<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> > >{ typedef typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::DATA_TYPE::stce_9910* stce_9998; static inline stce_9998 value(std::vector<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> > &value) { stce_9998 tape = 0; for (size_t stce_9816 = 0; stce_9816 < value.size(); stce_9816++) { if (stce_10009<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> >::value(value[stce_9816]) != 0) { tape = stce_10009<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> >::value(value[stce_9816]); break; } } return tape; } }; template<class stce_9753, class stce_9876, class stce_9873 > struct stce_10009 <const std::vector<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> > >{ typedef typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::DATA_TYPE::stce_9910* stce_9998; static inline stce_9998 value(const std::vector<dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> > &value) { stce_9998 tape = 0; for (size_t stce_9816 = 0; stce_9816 < value.size(); stce_9816++) { if (stce_10009<const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> >::value(value[stce_9816]) != 0) { tape = stce_10009<const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> >::value(value[stce_9816]); break; } } return tape; } }; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_10009 <dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> >{ typedef typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::DATA_TYPE::stce_9910* stce_9998; static inline stce_9998 value(dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &value) { return value._data().stce_9912(); } }; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_10009 <const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> >{ typedef typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::DATA_TYPE::stce_9910* stce_9998; static inline stce_9998 value(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &value) { return value._data().stce_9912(); } }; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_10009 <std::vector<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> > >{ typedef typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::DATA_TYPE::stce_9910* stce_9998; static inline stce_9998 value(std::vector<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> > &value) { stce_9998 tape = 0; for (size_t stce_9816 = 0; stce_9816 < value.size(); stce_9816++) { if (stce_10009<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> >::value(value[stce_9816]) != 0) { tape = stce_10009<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> >::value(value[stce_9816]); break; } } return tape; } }; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_10009 <const std::vector<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> > >{ typedef typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::DATA_TYPE::stce_9910* stce_9998; static inline stce_9998 value(const std::vector<dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> > &value) { stce_9998 tape = 0; for (size_t stce_9816 = 0; stce_9816 < value.size(); stce_9816++) { if (stce_10009<const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> >::value(value[stce_9816]) != 0) { tape = stce_10009<const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> >::value(value[stce_9816]); break; } } return tape; } }; template<class stce_9753, class stce_9871, class stce_9873 > struct stce_10009 <dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> >{ typedef typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::DATA_TYPE::stce_9910* stce_9998; static inline stce_9998 value(dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &value) { return value._data().stce_9912(); } }; template<class stce_9753, class stce_9871, class stce_9873 > struct stce_10009 <const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> >{ typedef typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::DATA_TYPE::stce_9910* stce_9998; static inline stce_9998 value(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &value) { return value._data().stce_9912(); } }; template<class stce_9753, class stce_9871, class stce_9873 > struct stce_10009 <std::vector<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> > >{ typedef typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::DATA_TYPE::stce_9910* stce_9998; static inline stce_9998 value(std::vector<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> > &value) { stce_9998 tape = 0; for (size_t stce_9816 = 0; stce_9816 < value.size(); stce_9816++) { if (stce_10009<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> >::value(value[stce_9816]) != 0) { tape = stce_10009<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> >::value(value[stce_9816]); break; } } return tape; } }; template<class stce_9753, class stce_9871, class stce_9873 > struct stce_10009 <const std::vector<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> > >{ typedef typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::DATA_TYPE::stce_9910* stce_9998; static inline stce_9998 value(const std::vector<dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> > &value) { stce_9998 tape = 0; for (size_t stce_9816 = 0; stce_9816 < value.size(); stce_9816++) { if (stce_10009<const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> >::value(value[stce_9816]) != 0) { tape = stce_10009<const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> >::value(value[stce_9816]); break; } } return tape; } }; template<class stce_9753, class stce_9872, class stce_9873 > struct stce_10009 <dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> >{ typedef typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::DATA_TYPE::stce_9910* stce_9998; static inline stce_9998 value(dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &value) { return value._data().stce_9912(); } }; template<class stce_9753, class stce_9872, class stce_9873 > struct stce_10009 <const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> >{ typedef typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::DATA_TYPE::stce_9910* stce_9998; static inline stce_9998 value(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &value) { return value._data().stce_9912(); } }; template<class stce_9753, class stce_9872, class stce_9873 > struct stce_10009 <std::vector<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> > >{ typedef typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::DATA_TYPE::stce_9910* stce_9998; static inline stce_9998 value(std::vector<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> > &value) { stce_9998 tape = 0; for (size_t stce_9816 = 0; stce_9816 < value.size(); stce_9816++) { if (stce_10009<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> >::value(value[stce_9816]) != 0) { tape = stce_10009<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> >::value(value[stce_9816]); break; } } return tape; } }; template<class stce_9753, class stce_9872, class stce_9873 > struct stce_10009 <const std::vector<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> > >{ typedef typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::DATA_TYPE::stce_9910* stce_9998; static inline stce_9998 value(const std::vector<dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> > &value) { stce_9998 tape = 0; for (size_t stce_9816 = 0; stce_9816 < value.size(); stce_9816++) { if (stce_10009<const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> >::value(value[stce_9816]) != 0) { tape = stce_10009<const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> >::value(value[stce_9816]); break; } } return tape; } };
  template <typename stce_9774>
  inline typename stce_10009<stce_9774>::stce_9998 tape(stce_9774 &stce_9776) {
    return stce_10009<stce_9774>::value(stce_9776);
  }
  template <typename stce_9774>
  inline typename stce_10009<const stce_9774>::stce_9998 tape(const stce_9774 &stce_9776) {
    return stce_10009<const stce_9774>::value(stce_9776);
  }
  template< typename stce_9774 > struct stce_10010 {
    typedef DCO_TAPE_INT stce_9998;
    static inline stce_9998 value(const stce_9774 &stce_10001) {
      (void) stce_10001;
      return 0;
    }
  };
  template<class stce_9753, class stce_9877 > struct stce_10010 <dco::stce_9847::stce_9864<stce_9753, stce_9877> >{ typedef typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::DATA_TYPE::stce_9911 stce_9998; static inline stce_9998 value(dco::stce_9847::stce_9864<stce_9753, stce_9877> &value) { return value._data()._tape_index(); } }; template<class stce_9753, class stce_9877 > struct stce_10010 <const dco::stce_9847::stce_9864<stce_9753, stce_9877> >{ typedef typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::DATA_TYPE::stce_9911 stce_9998; static inline stce_9998 value(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &value) { return value._data()._tape_index(); } }; template<class stce_9753, class stce_9876, class stce_9873 > struct stce_10010 <dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> >{ typedef typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::DATA_TYPE::stce_9911 stce_9998; static inline stce_9998 value(dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &value) { return value._data()._tape_index(); } }; template<class stce_9753, class stce_9876, class stce_9873 > struct stce_10010 <const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> >{ typedef typename dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873>::DATA_TYPE::stce_9911 stce_9998; static inline stce_9998 value(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &value) { return value._data()._tape_index(); } }; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_10010 <dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> >{ typedef typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::DATA_TYPE::stce_9911 stce_9998; static inline stce_9998 value(dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &value) { return value._data()._tape_index(); } }; template<class stce_9753, class stce_9871, class stce_9872, class stce_9873 > struct stce_10010 <const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> >{ typedef typename dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873>::DATA_TYPE::stce_9911 stce_9998; static inline stce_9998 value(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &value) { return value._data()._tape_index(); } }; template<class stce_9753, class stce_9871, class stce_9873 > struct stce_10010 <dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> >{ typedef typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::DATA_TYPE::stce_9911 stce_9998; static inline stce_9998 value(dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &value) { return value._data()._tape_index(); } }; template<class stce_9753, class stce_9871, class stce_9873 > struct stce_10010 <const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> >{ typedef typename dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873>::DATA_TYPE::stce_9911 stce_9998; static inline stce_9998 value(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &value) { return value._data()._tape_index(); } }; template<class stce_9753, class stce_9872, class stce_9873 > struct stce_10010 <dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> >{ typedef typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::DATA_TYPE::stce_9911 stce_9998; static inline stce_9998 value(dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &value) { return value._data()._tape_index(); } }; template<class stce_9753, class stce_9872, class stce_9873 > struct stce_10010 <const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> >{ typedef typename dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873>::DATA_TYPE::stce_9911 stce_9998; static inline stce_9998 value(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &value) { return value._data()._tape_index(); } };
  template <typename stce_9774>
  inline typename stce_10010<stce_9774>::stce_9998 tape_index(stce_9774 &stce_9776) {
    return stce_10010<stce_9774>::value(stce_9776);
  }
  template <typename stce_9774>
  inline typename stce_10010<const stce_9774>::stce_9998 tape_index(const stce_9774 &stce_9776) {
    return stce_10010<const stce_9774>::value(stce_9776);
  }
}
namespace dco {
  namespace stce_9847 {
    template<class stce_9753, class stce_9943 = stce_9753>
    struct stce_9944 {
      struct TAPE_ENTRY {
        DCO_TAPE_INT arg;
        stce_9753 pval;
        TAPE_ENTRY(): arg(0), pval(0) {}
      };
    public:
      struct position_t {
        friend struct stce_9944;
      private:
        size_t stce_10011;
        size_t stce_10012;
        size_t stce_10013;
        position_t(const size_t stce_10014, const size_t stce_10015, const size_t stce_10016) : stce_10011(stce_10014), stce_10012(stce_10015), stce_10013(stce_10016) {}
      public:
        position_t() : stce_10011(0), stce_10012(0), stce_10013(0) {}
        inline const size_t &_stackcounter() const {
          return stce_10012;
        }
        inline const size_t &_progvarcounter() const {
          return stce_10013;
        }
        inline const size_t &_chunknum() const {
          return stce_10011;
        }
        inline bool operator== (const position_t &stce_10017) const {
          if (_chunknum() == stce_10017._chunknum() && _stackcounter() == stce_10017._stackcounter())
            return true;
          else
            return false;
        }
        inline bool operator> (const position_t &stce_10017) const {
          if (_chunknum() == stce_10017._chunknum()) return _stackcounter() > stce_10017._stackcounter();
          else return _chunknum() > stce_10017._chunknum();
        }
        inline bool operator< (const position_t &stce_10017) const {
          if (_chunknum() == stce_10017._chunknum()) return _stackcounter() < stce_10017._stackcounter();
          else return _chunknum() < stce_10017._chunknum();
        }
        template<class stce_10018>
        void stce_10019(stce_10018 &stce_10020) {
          stce_10020.stce_10021 = stce_10011;
          stce_10020.stce_10022 = stce_10012;
          stce_10020.stce_10023 = stce_10013;
        }
      };
      struct interpretation_settings;
    private:
      struct stce_10024 {
        TAPE_ENTRY *stce_9813;
        size_t stce_10025;
        size_t stce_10026;
        stce_10024(size_t stce_10027) : stce_10025(0), stce_10026(stce_10027) {
          stce_9813 = new TAPE_ENTRY[stce_10027];
        }
        ~stce_10024() {
          delete [] stce_9813;
        }
        inline size_t stce_10028() const {
          return stce_10026 - stce_10025;
        }
      };
    private:
      bool stce_10029;
      bool stce_10030;
      std::vector<stce_10024 *> stce_10031;
      stce_10024 *stce_10032;
      size_t stce_10033;
      size_t stce_10034;
      stce_9943 *stce_10035;
      size_t stce_10036;
      size_t _progvarcounter;
      int stce_10037;
      size_t stce_10038;
      stce_9944(size_t stce_10039) : stce_10032(0), stce_10033(0), stce_10034(0), stce_10035(0), _progvarcounter(0), stce_10038(stce_10039), stce_10040(false) {
        stce_10032 = new stce_10024(stce_10038);
        stce_10031.push_back(stce_10032);
        stce_10034 = 1;
        stce_10030 = true;
      }
      void stce_10041(const TAPE_ENTRY *start, TAPE_ENTRY *end, size_t &stce_10042, const interpretation_settings &stce_10043)
      ;
      void stce_10044(const position_t &stce_9844, const position_t &stce_9845, const interpretation_settings &stce_10043) ;
    public:
      inline position_t get_position() const {
        return position_t(stce_10033, stce_10032->stce_10025, _progvarcounter);
      }
      inline double get_tape_memory_size() {
        return (get_position()._progvarcounter() * sizeof(stce_9753) + (stce_10033 * stce_10038 + stce_10032->stce_10025) * sizeof(TAPE_ENTRY)) / 1024.0 / 1024.0;
      }
      inline size_t stce_10045() const {
        return (get_position()._progvarcounter() * sizeof(stce_9753) + (stce_10033 * stce_10038 + stce_10032->stce_10025) * sizeof(TAPE_ENTRY));
      }
      typedef stce_9944<stce_9753, stce_9943> stce_10046;
public:
struct interpretation_settings {
  bool reset;
  bool stce_10047;
  interpretation_settings() : reset(false), stce_10047(false) {}
};
bool stce_10040;
class stce_10048 {
private:
  TAPE_ENTRY *stce_10049;
  const size_t stce_10050;
  size_t stce_10051;
public:
  stce_10048(TAPE_ENTRY *stce_10052, const size_t stce_10053, stce_10046 *const stce_10054 = 0) :
    stce_10049(stce_10052), stce_10050(stce_10053), stce_10051(0) {
    (void) stce_10054;
  }
  void finalize() {
    while (stce_10051 < stce_10050) {
      stce_10049->arg = 0;
      stce_10049->pval = 0.0;
      stce_10049++;
      stce_10051++;
    }
    stce_10049->arg = static_cast<DCO_TAPE_INT>(stce_10050);
  }
  template <typename stce_9907>
  void put(const stce_9907 &stce_9776, const stce_9943 &stce_10055) {
    stce_10049->arg = stce_9776._data()._tape_index();
    stce_10049->pval = stce_10055;
    stce_10049++;
    stce_10051++;
  }
};
class stce_10056 {
private:
  TAPE_ENTRY *stce_10049;
  const size_t stce_10050;
  size_t stce_10051;
  stce_10046 *const stce_10057;
  template <typename stce_10058>
  inline int stce_10059(const stce_10058 &stce_9776,
                                       const stce_9753 &pval,
                                       TAPE_ENTRY *&stce_10060) {
    if (stce_9776._data()._tape_index() != 0) {
      stce_10061(stce_9776._data()._tape_index(), pval, stce_10060);
      return 1;
    }
    return 0;
  }
  static inline void stce_10061(const DCO_TAPE_INT &tape_index,
                                     const stce_9753 &pval,
                                     TAPE_ENTRY *&stce_10060) {
    stce_10060->arg = tape_index;
    stce_10060->pval = pval;
    ++stce_10060;
  }
public:
  stce_10056(TAPE_ENTRY *stce_10052, const size_t stce_10053, stce_10046 *const stce_10054) :
    stce_10049(stce_10052), stce_10050(stce_10053), stce_10051(0), stce_10057(stce_10054) {
    if (stce_10057->stce_10040 == true)
      throw dco::exception::create<std::runtime_error>("this is a non-threadsafe local_gradient type: only one instance at a given point in time possible!");
    stce_10057->stce_10040 = true;
  }
  void finalize() {
    if (stce_10051 > stce_10050)
      throw dco::exception::create<std::runtime_error>("putting to many partials -- please correct upper_bound in constructor.");
    stce_10057->stce_10062(stce_10049);
    stce_10049->arg = static_cast<DCO_TAPE_INT>(stce_10051);
    stce_10057->stce_10040 = false;
  }
  template <typename stce_9907>
  void put(const stce_9907 &stce_9776, const stce_9943 &stce_10055) {
    if (stce_10059(stce_9776, stce_10055, stce_10049)) {
      stce_10051++;
    }
  }
};
template<typename stce_10063, typename stce_9907>
stce_10063 create_local_gradient_object(stce_9907 &stce_10064, const size_t stce_10053 = 0) {
  DCO_TAPE_INT stce_10065;
  TAPE_ENTRY *stce_9823 = this->_get_insert_ptr(stce_10053 + 1, stce_10065);
  stce_10064._data().register_variable(stce_10065, this);
  return stce_10063(stce_9823, stce_10053, this);
}
private:
public:
typedef dco::helper::stce_9947<stce_10046> stce_10066;
template <typename stce_10067>
class stce_10068 {
public:
  typedef void (*stce_10069)(stce_10046 &stce_10070, const interpretation_settings &stce_10071, stce_10067 *stce_10072);
  typedef void (*stce_10073)(stce_10046 &stce_10070, stce_10067 *stce_10072);
  typedef void (*stce_10074)(stce_10067 *stce_10072);
};
class stce_10075 {
public:
  virtual void stce_10076(stce_10046 &stce_10070, const interpretation_settings &stce_10071, stce_10066 *stce_10072) = 0;
  virtual ~stce_10075() {};
};
template <typename stce_10067>
class stce_10077 : public stce_10075 {
private:
  union {
    typename stce_10068<stce_10067>::stce_10074 stce_10078;
    typename stce_10068<stce_10067>::stce_10073 stce_10079;
    typename stce_10068<stce_10067>::stce_10069 stce_10080;
  } stce_10078;
  int stce_10081;
public:
  stce_10077(typename stce_10068<stce_10067>::stce_10074 stce_10082) : stce_10081(0) {
    stce_10078.stce_10078 = stce_10082;
  }
  stce_10077(typename stce_10068<stce_10067>::stce_10073 stce_10082) : stce_10081(1) {
    stce_10078.stce_10079 = stce_10082;
  }
  stce_10077(typename stce_10068<stce_10067>::stce_10069 stce_10082) : stce_10081(2) {
    stce_10078.stce_10080 = stce_10082;
  }
  void stce_10076(stce_10046 &stce_10070, const interpretation_settings &stce_10071, stce_10066 *stce_10072) {
    stce_10067 *stce_10083 = static_cast<stce_10067 *>(stce_10072);
    switch (stce_10081) {
      case 0:
        stce_10078.stce_10078(stce_10083);
        break;
      case 1:
        stce_10078.stce_10079(stce_10070, stce_10083);
        break;
      case 2:
        stce_10078.stce_10080(stce_10070, stce_10071, stce_10083);
        break;
      default:
        throw dco::exception::create<std::runtime_error>("unknown callback to run.");
        break;
    }
  }
  ~stce_10077() {}
};
class stce_10084 {
  stce_10066 *stce_10072;
  stce_10075 *stce_10085;
  position_t stce_10086;
public:
  stce_10084() : stce_10072(0),
    stce_10085(0) { }
  template <typename stce_10067, typename stce_10087>
  void stce_10088(stce_10087 stce_10082) {
    if (stce_10085)
      throw dco::exception::create<std::runtime_error>("currently not supported to insert external_adjoint_object_bases twice.");
    stce_10085 = new stce_10077<stce_10067>(stce_10082);
  }
  stce_10066 *&stce_10089() {
    return stce_10072;
  }
  void stce_10090() {
    delete stce_10072;
    if (stce_10085)
      delete stce_10085;
  }
  position_t &stce_10091() {
    return stce_10086;
  }
  void stce_10076(stce_10046 &stce_10070, const interpretation_settings &stce_10071) {
    if (stce_10085)
      stce_10085->stce_10076(stce_10070, stce_10071, stce_10072);
  }
};
std::vector<stce_10084> stce_10092;
template <class stce_10093, typename FCN_PARAMETERS>
inline stce_10093 *create_callback_object(const FCN_PARAMETERS &parameters) {
  const stce_9826<FCN_PARAMETERS> stce_10094(parameters);
  stce_10084 stce_10095;
  stce_10092.push_back(stce_10095);
  stce_10092.back().stce_10091() = get_position();
  stce_10093 *stce_10072 = stce_10094.template create<stce_10093>();
  stce_10092.back().stce_10089() = stce_10072;
  stce_10072->stce_9949(this);
  return stce_10072;
}
template <class stce_10093>
inline stce_10093 *create_callback_object() {
  void *stce_10096;
  return create_callback_object<stce_10093>(stce_10096);
}
template <class stce_10093, typename stce_10087>
inline void insert_callback(stce_10087 stce_10085, stce_10093 *stce_10097) {
  if (stce_10092.back().stce_10089() == stce_10097) {
    stce_10092.back().template stce_10088<stce_10093>(stce_10085);
    stce_10092.back().stce_10091() = get_position();
    DCO_TAPE_INT stce_9886 = 0;
    _get_insert_ptr(1, stce_9886)->arg = 0;
  } else {
    throw dco::exception::create<std::runtime_error>("please always insert most recently created external function object.");
  }
}
private:
inline void stce_10098(const position_t &stce_9845) {
  for (int stce_9816 = static_cast<int>(stce_10092.size()) - 1; stce_9816 >= 0; stce_9816--) {
    size_t stce_10099 = static_cast<size_t>(stce_9816);
    if (stce_10092[stce_10099].stce_10091()._progvarcounter() > stce_9845._progvarcounter()) {
      stce_10092[stce_10099].stce_10090();
      stce_10092.pop_back();
    } else {
      break;
    }
  }
}
public:
inline void tape_to_dot(position_t stce_9844 = position_t(), position_t stce_9845 = position_t(), const std::string &filename = "tape.dot") {
  if (stce_9844 == position_t())
    stce_9844 = get_position();
  stce_9830 stce_9831(filename);
  if (stce_9844._progvarcounter() < stce_9845._progvarcounter()) {
    position_t stce_9886 = stce_9844;
    stce_9844 = stce_9845;
    stce_9845 = stce_9886;
  }
  int stce_10100 = -1;
  int stce_10101 = 0;
  for (int stce_9816 = static_cast<int>(stce_10092.size()) - 1; stce_9816 >= 0; --stce_9816) {
    size_t stce_10099 = static_cast<size_t>(stce_9816);
    if ((stce_10092[stce_10099].stce_10091()._progvarcounter() <= stce_9844._progvarcounter()) &&
        (stce_10092[stce_10099].stce_10091()._progvarcounter() >= stce_9845._progvarcounter())) {
      if (stce_10100 == -1) stce_10100 = stce_9816;
      ++stce_10101;
    }
  }
  position_t stce_10102 = stce_9845;
  stce_10103(stce_9844, stce_9845, stce_9831);
  for (int stce_9816 = stce_10100; stce_10101 > 0; --stce_10101) {
    size_t stce_10099 = static_cast<size_t>(stce_9816);
    stce_10102 = stce_10092[stce_10099].stce_10091();
    stce_10092[stce_10099].stce_10089()->stce_9951(stce_9831, static_cast<DCO_TAPE_INT>(stce_10102._progvarcounter() + 1));
    --stce_9816;
  }
}
private:
 void stce_10104(const position_t &stce_9844, const position_t &stce_9845, const interpretation_settings &stce_10043)
;
public:
inline bool is_active() {
  return stce_10030;
}
inline void switch_to_active() {
  DCO_LOG(logINFO) << "tape " << this << " switched to active.";
  if (!stce_10030) stce_10030 = true;
}
inline void switch_to_passive() {
  DCO_LOG(logINFO) << "tape " << this << " switched to passive.";
  if (stce_10030) stce_10030 = false;
}
template<class stce_9877 >
inline void register_variable(dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) {
  DCO_TAPE_INT stce_10105;
  TAPE_ENTRY *stce_10106 = _get_insert_ptr(1, stce_10105);
  (void) stce_10106;
  stce_10106->arg = 0;
  stce_9877 &data = const_cast<stce_9877 &>(stce_9776._data());
  data.register_variable(stce_10105, this);
}
template<class stce_9877 >
inline void register_variable(dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776, const typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::VALUE_TYPE &stce_9829) {
  stce_9776 = stce_9829;
  register_variable(stce_9776);
}
template<class stce_9877 >
inline void register_variable(std::vector<dco::stce_9847::stce_9864<stce_9753, stce_9877> > &stce_9776) {
  for (size_t stce_9816 = 0; stce_9816 < stce_9776.size(); stce_9816++)
    register_variable(stce_9776[stce_9816]);
}
template <typename stce_9774, typename stce_10002>
inline void register_variable(stce_10004<stce_9774, stce_10002> stce_9776) {
  for (size_t stce_9816 = 0; stce_9816 < stce_9776.size(); stce_9816++)
    register_variable(stce_9776[stce_9816]);
}
template <typename stce_9774, typename stce_10002>
inline void register_variable(stce_10007<stce_9774, stce_10002> stce_9776) {
  for (size_t stce_9816 = 0; stce_9816 < stce_9776.size(); stce_9816++)
    register_variable(stce_9776[stce_9816]);
}
template<class stce_9877 >
inline void register_variable(dco::stce_9847::stce_9864<stce_9753, stce_9877> *stce_9776, const int stce_9962, const typename dco::stce_9847::stce_9864<stce_9753, stce_9877>::VALUE_TYPE *const stce_9829) {
  if (stce_9962 == 0) return;
  for (int stce_9816 = 0; stce_9816 < stce_9962; ++stce_9816)
    register_variable(stce_9776[stce_9816], stce_9829[stce_9816]);
}
template<class stce_9877 >
inline void register_variable(dco::stce_9847::stce_9864<stce_9753, stce_9877> *stce_9776, const size_t stce_9962) {
  if (stce_9962 == 0) return;
  for (size_t stce_9816 = 0; stce_9816 < stce_9962; ++stce_9816)
    register_variable(stce_9776[stce_9816]);
}
template<class stce_9877 >
inline void register_output_variable(dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) {
  stce_9776 = static_cast<dco::stce_9847::stce_9864<stce_9753, stce_9877> >(1.0) * stce_9776;
}
template<class stce_9877 >
inline void register_output_variable(dco::stce_9847::stce_9864<stce_9753, stce_9877> *stce_9776, const size_t stce_9962) {
  if (stce_9962 == 0) return;
  for (size_t stce_9816 = 0; stce_9816 < stce_9962; ++stce_9816)
    stce_9776[stce_9816] = static_cast<dco::stce_9847::stce_9864<stce_9753, stce_9877> >(1.0) * stce_9776[stce_9816];
}
template<class stce_9877 >
inline void register_output_variable(std::vector<dco::stce_9847::stce_9864<stce_9753, stce_9877> > &stce_9776) {
  for (size_t stce_9816 = 0; stce_9816 < stce_9776.size(); stce_9816++)
    register_output_variable(stce_9776[stce_9816]);
}
template <typename stce_9774, typename stce_10002>
inline void register_output_variable(stce_10004<stce_9774, stce_10002> stce_9776) {
  for (size_t stce_9816 = 0; stce_9816 < stce_9776.size(); stce_9816++)
    register_output_variable(stce_9776[stce_9816]);
}
template <typename stce_9774, typename stce_10002>
inline void register_output_variable(stce_10007<stce_9774, stce_10002> stce_9776) {
  for (size_t stce_9816 = 0; stce_9816 < stce_9776.size(); stce_9816++)
    register_output_variable(stce_9776[stce_9816]);
}
inline void reset_to(const position_t &stce_9845) {
  stce_10107(stce_9845);
  stce_10098(stce_9845);
}
inline void reset() {
  reset_to(position_t());
}
inline void interpret_adjoint() {
  position_t stce_9845;
  interpretation_settings stce_10043;
  stce_10104(get_position(), stce_9845, stce_10043);
}
inline void interpret_adjoint_to(const position_t &stce_9845) {
  interpretation_settings stce_10043;
  if (stce_9845 > get_position())
    throw dco::exception::create<std::runtime_error>("adjoint interpretation: from < to.", "../build_files//../src/dco//dco_tape_interface_inc.hpp", 241);
  else
    stce_10104(get_position(), stce_9845, stce_10043);
}
inline void interpret_adjoint_from(const position_t &stce_9844) {
  position_t stce_9845;
  assert(!(stce_9844 < stce_9845));
  interpretation_settings stce_10043;
  stce_10104(stce_9844, stce_9845, stce_10043);
}
inline void interpret_adjoint_from_to(const position_t &stce_9844, const position_t &stce_9845) {
  interpretation_settings stce_10043;
  if (stce_9845 > stce_9844)
    throw dco::exception::create<std::runtime_error>("adjoint interpretation: from < to.", "../build_files//../src/dco//dco_tape_interface_inc.hpp", 264);
  else
    stce_10104(stce_9844, stce_9845, stce_10043);
}
inline void interpret_adjoint_and_reset_to(const position_t &stce_9845) {
  position_t stce_9844(get_position());
  interpretation_settings stce_10043;
  stce_10043.reset = true;
  stce_10043.stce_10047 = true;
  stce_10104(stce_9844, stce_9845, stce_10043);
  stce_10107(stce_9845);
  stce_10098(stce_9845);
}
inline void interpret_adjoint_and_zero_adjoints_to(const position_t &stce_9845) {
  position_t stce_9844(get_position());
  interpretation_settings stce_10043;
  stce_10043.reset = false;
  stce_10043.stce_10047 = true;
  stce_10104(stce_9844, stce_9845, stce_10043);
}
inline void interpret_adjoint_and_zero_adjoints_from_to(const position_t &stce_9844, const position_t &stce_9845) {
  interpretation_settings stce_10043;
  stce_10043.reset = false;
  stce_10043.stce_10047 = true;
  stce_10104(stce_9844, stce_9845, stce_10043);
}
inline void zero_adjoints() {
  position_t stce_9845;
  stce_10108(get_position(), stce_9845);
}
inline void zero_adjoints_to(const position_t &stce_9845) {
  stce_10108(get_position(), stce_9845);
}
inline void zero_adjoints_from(const position_t &stce_9844) {
  position_t stce_9845;
  stce_10108(stce_9844, stce_9845);
}
inline void zero_adjoints_from_to(const position_t &stce_9844, const position_t &stce_9845) {
  stce_10108(stce_9844, stce_9845);
}
struct stce_10109 {
protected:
  template<class stce_9877 >
  static inline int stce_10110(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) {
    return stce_9776._data().stce_10111();
  }
  template<class stce_9871, class stce_9872, class stce_9873 >
  static inline int stce_10110(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) {
    return stce_10110(stce_9776.stce_9856) + stce_10110(stce_9776.stce_9857);
  }
  template<class stce_9876, class stce_9873 >
  static inline int stce_10110(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) {
    return stce_10110(stce_9776.stce_9852);
  }
  template<class stce_9871, class stce_9873 >
  static inline int stce_10110(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) {
    return stce_10110(stce_9776.stce_9856);
  }
  template<class stce_9872, class stce_9873 >
  static inline int stce_10110(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) {
    return stce_10110(stce_9776.stce_9857);
  }
  template<class stce_9877 >
  static inline int stce_10112(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776, stce_10046 *&tape) {
    if (tape == 0)
      tape = stce_9776._data().stce_9912();
    else {
      if (stce_9776._data().stce_9912() != NULL && stce_9776._data().stce_9912() != tape) {
        throw dco::exception::create<std::runtime_error>("multiple tape error: different tapes on right-hand side of statement", "../build_files//../src/dco//dco_tape_helper_inc.hpp", 38);
      }
    }
    return stce_9776._data().stce_10111();
  }
  template<class stce_9871, class stce_9872, class stce_9873 >
  static inline int stce_10112(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776, stce_10046 *&tape) {
    return stce_10112(stce_9776.stce_9856, tape) + stce_10112(stce_9776.stce_9857, tape);
  }
  template<class stce_9876, class stce_9873 >
  static inline int stce_10112(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776, stce_10046 *&tape) {
    return stce_10112(stce_9776.stce_9852, tape);
  }
  template<class stce_9871, class stce_9873 >
  static inline int stce_10112(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776, stce_10046 *&tape) {
    return stce_10112(stce_9776.stce_9856, tape);
  }
  template<class stce_9872, class stce_9873 >
  static inline int stce_10112(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776, stce_10046 *&tape) {
    return stce_10112(stce_9776.stce_9857, tape);
  }
  struct stce_10113 {
    TAPE_ENTRY *stce_10114;
    template<class stce_9906>
    stce_10113(TAPE_ENTRY *stce_10060, const int stce_10115, stce_9906 stce_9870) : stce_10114(stce_10060) {
      stce_10116(stce_9870, 1.0);
      stce_10114->arg = stce_10115;
    }
    template<class stce_9877 >
    inline void stce_10116(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776, const stce_9753 &pval) {
      if (stce_9776._data()._tape_index() != 0) {
        stce_10114->arg = stce_9776._data()._tape_index();
        stce_10114->pval = pval;
        ++stce_10114;
      }
    }
    template<class stce_9871, class stce_9872, class stce_9873 >
    inline void stce_10116(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776, const stce_9753 &pval) {
      this->stce_10116(stce_9776.stce_9856, stce_9776.stce_9858()*pval);
      this->stce_10116(stce_9776.stce_9857, stce_9776.stce_9859()*pval);
    }
    template<class stce_9876, class stce_9873 >
    inline void stce_10116(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776, const stce_9753 &pval) {
      this->stce_10116(stce_9776.stce_9852, stce_9776.pval() * pval);
    }
    template<class stce_9871, class stce_9873 >
    inline void stce_10116(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776, const stce_9753 &pval) {
      this->stce_10116(stce_9776.stce_9856, stce_9776.stce_9858()*pval);
    }
    template<class stce_9872, class stce_9873 >
    inline void stce_10116(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776, const stce_9753 &pval) {
      this->stce_10116(stce_9776.stce_9857, stce_9776.stce_9859()*pval);
    }
  };
};
template<stce_10046 *&global_tape>
struct stce_10117 : stce_10109 {
  typedef stce_10046 stce_9910;
  typedef const DCO_TAPE_INT &stce_9911;
  typedef stce_9943 stce_9901;
  DCO_TAPE_INT stce_10118;
public:
  stce_10117() : stce_10118(0) {}
  inline void clear() {
    stce_10118 = 0;
  }
  inline const stce_9943 &stce_9905() const {
    return _adjoint();
  }
  inline stce_9943 &stce_9905() {
    return _adjoint();
  }
  inline stce_9943 &_adjoint() const {
    return global_tape->_adjoint(stce_10118);
  }
  inline void stce_9903(const stce_9943 &stce_9829) const {
    global_tape->_adjoint(stce_10118) = stce_9829;
  }
  inline bool _is_registered() const {
    return stce_10118 == 0 ? false : true;
  }
  inline DCO_TAPE_INT &_tape_index() {
    return stce_10118;
  }
  inline const DCO_TAPE_INT &_tape_index() const {
    return stce_10118;
  }
  inline int stce_10111() const {
    return stce_10118 == 0 ? 0 : 1;
  }
  inline void register_variable(DCO_TAPE_INT stce_10105 , stce_10046 *tape) {
    (void) tape;
    stce_10118 = stce_10105;
  }
  template<class stce_9906, class stce_9907>
  static inline void stce_9875(const stce_9906 &stce_9870, stce_9907 &stce_9908) {
    unsigned short stce_10115 = static_cast<unsigned short>(stce_10109::stce_10110(stce_9870));
    if (stce_10115 > 0) {
      if (NULL != global_tape && !global_tape->is_active()) {
        stce_10117 &data = const_cast<stce_10117 &>(stce_9908._data());
        data.clear();
        return;
      }
      DCO_TAPE_INT stce_10119;
      typename stce_10046::TAPE_ENTRY *stce_10060 = global_tape->_get_insert_ptr(stce_10115 + 1, stce_10119);
      (void) stce_10060;
      if (stce_10060 != 0) {
        typename stce_10109::stce_10113 stce_9886(stce_10060, stce_10115, stce_9870);
      }
      stce_10117 &data = const_cast<stce_10117 &>(stce_9908._data());
      data.stce_10118 = stce_10119;
    } else {
      stce_10117 &data = const_cast<stce_10117 &>(stce_9908._data());
      data.clear();
    }
  }
  static inline stce_10046 *stce_9912() {
    return global_tape;
  }
  inline void stce_10120(stce_10046 *stce_9774) {
    (void) stce_9774;
  }
};
struct stce_10121 : stce_10109 {
  typedef stce_10046 stce_9910;
  typedef const DCO_TAPE_INT &stce_9911;
  typedef stce_9943 stce_9901;
  DCO_TAPE_INT stce_10118;
  stce_10046 *stce_10122;
public:
  stce_10121() : stce_10118(0), stce_10122(0) {}
  inline void clear() {
    stce_10118 = 0;
    stce_10122 = 0;
  }
  inline const stce_9943 &stce_9905() const {
    return _adjoint();
  }
  inline stce_9943 &stce_9905() {
    return _adjoint();
  }
  inline stce_9943 &_adjoint() const {
    static stce_9943 stce_10096 = 0;
    if (stce_10122 == 0)
      return stce_10096;
    else
      return stce_10122->_adjoint(stce_10118);
  }
  inline void stce_9903(const stce_9943 &stce_9829) const {
    if (stce_10122 != 0)
      stce_10122->_adjoint(stce_10118) = stce_9829;
  }
  inline bool _is_registered() const {
    return stce_10118 == 0 ? false : true;
  }
  inline DCO_TAPE_INT &_tape_index() {
    return stce_10118;
  }
  inline const DCO_TAPE_INT &_tape_index() const {
    return stce_10118;
  }
  inline int stce_10111() const {
    return stce_10118 == 0 ? 0 : 1;
  }
  inline void register_variable(DCO_TAPE_INT stce_10105 , stce_10046 *tape) {
    (void) tape;
    stce_10118 = stce_10105;
    stce_10122 = tape;
  }
  inline stce_10046 *stce_9912() const {
    return stce_10122;
  }
  inline void stce_10120(stce_10046 *stce_9774) {
    stce_10122 = stce_9774;
  }
  template<class stce_9906, class stce_9907>
  static inline void stce_9875(const stce_9906 &stce_9870, stce_9907 &stce_9908) {
    stce_10046 *stce_10054 = 0;
    unsigned short stce_10115 = static_cast<unsigned short>(stce_10109::stce_10112(stce_9870, stce_10054));
    if (NULL != stce_10054 && stce_10115 > 0) {
      if (NULL != stce_10054 && !stce_10054->is_active()) {
        stce_10121 &data = const_cast<stce_10121 &>(stce_9908._data());
        data.clear();
        return;
      }
      DCO_TAPE_INT stce_10119;
      typename stce_10046::TAPE_ENTRY *stce_10060 = stce_10054->_get_insert_ptr(stce_10115 + 1, stce_10119);
      if (stce_10060 != 0) {
        typename stce_10109::stce_10113 stce_9886(stce_10060, stce_10115, stce_9870);
      }
      stce_10121 &data = const_cast<stce_10121 &>(stce_9908._data());
      data.stce_10118 = stce_10119;
      data.stce_10122 = stce_10054;
    } else {
      stce_10121 &data = const_cast<stce_10121 &>(stce_9908._data());
      data.clear();
    }
  }
};
      void stce_10103(position_t stce_9844, position_t stce_9845, stce_9830 &stce_9831) {
        (void)stce_9844;
        (void)stce_9845;
        (void)stce_9831;
        DCO_LOG(dco::logINFO) << "Writing chunk tape to dot from " << stce_9844._progvarcounter() << " to " << stce_9845._progvarcounter();
        if (stce_9844._progvarcounter() < stce_9845._progvarcounter()) {
          position_t stce_9886 = stce_9844;
          stce_9844 = stce_9845;
          stce_9845 = stce_9886;
        }
        DCO_TAPE_INT stce_10042 = static_cast<DCO_TAPE_INT>(stce_9844._progvarcounter());
        for (DCO_TAPE_INT stce_9816 = static_cast<DCO_TAPE_INT>(stce_9844._chunknum()); stce_9816 >= static_cast<DCO_TAPE_INT>(stce_9845._chunknum()); --stce_9816) {
          size_t stce_10099 = static_cast<size_t>(stce_9816);
          stce_10024 *stce_10123 = stce_10031[stce_10099];
          TAPE_ENTRY *start = 0;
          TAPE_ENTRY *end = 0;
          if (stce_10099 == stce_9844._chunknum()) start = stce_10123->stce_9813 + stce_9844._stackcounter();
          else start = stce_10123->stce_9813 + stce_10123->stce_10025;
          if (stce_10099 == stce_9845._chunknum()) end = stce_10123->stce_9813 + stce_9845._stackcounter();
          else end = stce_10123->stce_9813;
          TAPE_ENTRY *stce_10106 = start;
          while (stce_10106 != end) {
            stce_10106--;
            if (stce_10035 != 0) stce_9831.stce_9840(stce_10042, stce_10035[stce_10042]);
            else stce_9831.stce_9840(stce_10042);
            DCO_TAPE_INT stce_10124 = stce_10042;
            --stce_10042;
            const DCO_TAPE_INT &stce_10115 = stce_10106->arg;
            for (DCO_TAPE_INT stce_10125 = 0; stce_10125 < stce_10115; ++stce_10125) {
              stce_10106--;
              DCO_TAPE_INT stce_10126 = stce_10106->arg;
              stce_9753 stce_10127 = stce_10106->pval;
              stce_9831.stce_9843(stce_10126, stce_10124, stce_10127);
            }
          }
        }
      }
      inline stce_9943 &_adjoint(const DCO_TAPE_INT tape_index) {
        if (stce_10035 == 0) {
          stce_10036 = _progvarcounter;
          stce_10035 = new stce_9943[stce_10036 + 1];
          for (size_t stce_9816 = 0; stce_9816 <= stce_10036; ++stce_9816)
            stce_10035[stce_9816] = 0;
        } else {
          if (_progvarcounter > stce_10036) {
            stce_9943 *stce_10128 = new stce_9943[_progvarcounter + 1];
            for (size_t stce_9816 = 0; stce_9816 <= stce_10036; ++stce_9816)
              stce_10128[stce_9816] = stce_10035[stce_9816];
            for (size_t stce_9816 = stce_10036 + 1; stce_9816 <= _progvarcounter; ++stce_9816) {
              stce_10128[stce_9816] = 0;
            }
            delete [] stce_10035;
            stce_10035 = stce_10128;
            stce_10036 = _progvarcounter;
          }
        }
        return stce_10035[tape_index];
      }
      inline stce_9753 &stce_9984(const DCO_TAPE_INT tape_index) {
        stce_9943 &stce_9986 = _adjoint(tape_index);
        stce_9753 *stce_10129;
        stce_10129 = reinterpret_cast<stce_9753 *>(&stce_9986);
        return stce_10129[stce_10037];
      }
      static inline stce_9944 *create(const size_t size, const int stce_10013 = 0, size_t stce_10026 = DCO_CHUNK_SIZE) {
        (void)size;
        (void)stce_10013;
        stce_9944 *stce_9823 = new stce_9944(stce_10026);
        size_t stce_10130 = size / (stce_10026);
        for (size_t stce_9816 = 0; stce_9816 < stce_10130; ++stce_9816) {
          stce_10024 *stce_9886 = new stce_10024(stce_10026);
          for (size_t stce_10131 = 0; stce_10131 < stce_10026; ++stce_10131) {
            stce_9886->stce_9813[stce_9816].pval = 0;
          }
          stce_9823->stce_10031.push_back(stce_9886);
          stce_9823->stce_10034++;
        }
        return stce_9823;
      }
      static inline stce_9944 *create(tape_options stce_10132 = tape_options()) {
        return create(static_cast<size_t>(stce_10132.tapesize()), 0, stce_10132.chunksize());
      }
      static inline stce_9944 *create(const std::string &stce_10133, const std::string &filename = "dco_tape_sizes.dco") {
        (void)stce_10133;
        (void)filename;
        return new stce_9944(DCO_CHUNK_SIZE);
      }
      static inline void remove(stce_9944 *&tape) {
        tape->reset();
        if (tape->stce_10035 != 0) delete [] tape->stce_10035;
        for (DCO_TAPE_INT stce_9816 = static_cast<DCO_TAPE_INT>(tape->stce_10031.size()) - 1; stce_9816 >= 0; --stce_9816) {
          delete tape->stce_10031[static_cast<size_t>(stce_9816)];
        }
        tape->stce_10030 = false;
        tape->stce_10029 = true;
        delete tape;
        tape = 0;
      }
      inline void stce_10108(const position_t &stce_9844, const position_t &stce_9845) {
        if (stce_10035 == 0) return;
        size_t stce_10134 = stce_9844.stce_10013;
        if (stce_10134 > stce_10036) stce_10134 = stce_10036;
        size_t stce_10135 = stce_9845.stce_10013;
        if (stce_10135 > stce_10036) stce_10135 = stce_10036;
        for (size_t stce_9816 = stce_10134; stce_9816 > stce_10135; --stce_9816) {
          stce_10035[stce_9816] = 0;
        }
      }
      inline void stce_10062(const TAPE_ENTRY *end) {
        stce_10032->stce_10025 = static_cast<size_t>(end - stce_10032->stce_9813 + 1);
      }
      inline TAPE_ENTRY *_get_insert_ptr(const size_t stce_10136, DCO_TAPE_INT &stce_10105) {
        if ((stce_10136) > (stce_10032->stce_10028())) {
          ++stce_10033;
          if (stce_10033 < stce_10034) {
            stce_10032 = stce_10031[static_cast<size_t>(stce_10033)];
            stce_10032->stce_10025 = 0;
          } else {
            stce_10032 = new stce_10024(stce_10038);
            stce_10031.push_back(stce_10032);
            ++stce_10034;
          }
          stce_10031.reserve(static_cast<size_t>(stce_10033));
          stce_10032 = stce_10031[static_cast<size_t>(stce_10033)];
        }
        TAPE_ENTRY *stce_9823 = stce_10032->stce_9813 + stce_10032->stce_10025;
        stce_10032->stce_10025 += stce_10136;
        _progvarcounter++;
        stce_10105 = static_cast<DCO_TAPE_INT>(_progvarcounter);
        return stce_9823;
      }
      inline TAPE_ENTRY *stce_9980(const size_t stce_10136, DCO_TAPE_INT &stce_10105) {
        if (stce_10136 > stce_10032->stce_10028()) {
          ++stce_10033;
          if (stce_10033 < stce_10034) {
            stce_10032 = stce_10031[stce_10033];
            stce_10032->stce_10025 = 0;
          } else {
            stce_10032 = new stce_10024(stce_10038);
            stce_10031.push_back(stce_10032);
            ++stce_10034;
          }
          stce_10031.reserve(stce_10033);
          stce_10032 = stce_10031[stce_10033];
        }
        TAPE_ENTRY *stce_9823 = stce_10032->stce_9813 + stce_10032->stce_10025;
        stce_10032->stce_10025 += stce_10136;
        stce_10105 = _progvarcounter + 1;
        _progvarcounter += stce_10136;
        return stce_9823;
      }
      inline void stce_10107(const position_t &stce_9845) {
        stce_10108(get_position(), stce_9845);
        stce_10032 = stce_10031[static_cast<size_t>(stce_9845.stce_10011)];
        stce_10033 = stce_9845.stce_10011;
        stce_10032->stce_10025 = static_cast<size_t>(stce_9845.stce_10012);
        _progvarcounter = stce_9845.stce_10013;
      }
    };
  }
}
namespace dco {
  namespace instrument {
    extern bool stce_10137;
    struct stce_10138 {
      struct position_t {
        DCO_TAPE_INT _progvarcounter;
        DCO_TAPE_INT _stackcounter;
        position_t(DCO_TAPE_INT stce_10013, DCO_TAPE_INT stce_10012) : _progvarcounter(stce_10013), _stackcounter(stce_10012) {}
        inline DCO_TAPE_INT stce_10139() {
          return _progvarcounter + _stackcounter * 2;
        }
        inline DCO_TAPE_INT &stce_10140() {
          return _progvarcounter;
        }
      };
      struct stce_10141 {
        DCO_TAPE_INT stce_10142;
        std::string stce_10143;
        DCO_TAPE_INT stce_10144;
        position_t stce_10020;
        DCO_TAPE_INT stce_10145;
        DCO_TAPE_INT stce_10146;
        DCO_TAPE_INT stce_10147;
        DCO_TAPE_INT stce_10148;
        DCO_TAPE_INT stce_10149;
        DCO_TAPE_INT stce_10150;
        double stce_10151;
        dco::timer stce_10152;
        stce_10141 *stce_10070;
        stce_10141(stce_10138 *tape, const std::string &name, stce_10141 *stce_10153) : stce_10142(++tape->stce_9839),
          stce_10143(name),
          stce_10144(-1),
          stce_10020(tape->get_position()),
          stce_10145(0),
          stce_10146(0),
          stce_10147(0),
          stce_10148(0),
          stce_10149(0),
          stce_10150(0),
          stce_10151(0),
          stce_10070(stce_10153) {
        }
      };
    public:
      struct stce_10066 {
        inline virtual ~stce_10066() {
        }
        inline virtual void stce_9951(stce_9830 &stce_9831) {
          (void)stce_9831;
        }
      };
      struct interpretation_settings {
      };
      typedef void (*stce_10154)(stce_10138 &stce_10070, const interpretation_settings &stce_10043, stce_10066 *stce_10072);
      inline void stce_10155(stce_10154 stce_10156, stce_10066 *stce_10072) {
        (void) stce_10156;
        (void) stce_10072;
      }
      static inline stce_10138 *get_tape() {
        return NULL;
      }
      inline DCO_TAPE_INT tape_index() const {
        return 0;
      }
      DCO_TAPE_INT stce_9839;
      std::ofstream stce_10157;
      std::ofstream stce_10158;
      std::ofstream stce_10159;
      std::ofstream stce_10160;
      std::ofstream stce_10161;
      std::ofstream stce_10162;
      DCO_TAPE_INT _progvarcounter;
      DCO_TAPE_INT _stackcounter;
      stce_10141 *stce_10163;
      std::vector<stce_10141 *> stce_10164;
      std::stack<stce_10141 *> stce_10165;
      DCO_TAPE_INT stce_10166;
      stce_10138() : stce_9839(0),
        _progvarcounter(0),
        _stackcounter(0),
        stce_10163(NULL),
        stce_10166(0) { }
      ~stce_10138() {
        _finish_instrument();
      }
      inline bool is_active() {
        return stce_10137;
      }
      inline void switch_to_active() {
        stce_10137 = true;
      }
      inline void switch_to_passive() {
        stce_10137 = false;
      }
      static void remove(stce_10138 *stce_9774) {
        delete stce_9774;
      }
      static stce_10138 *create(const DCO_TAPE_INT size = 0, const DCO_TAPE_INT stce_10167 = 0) {
        (void) size;
        (void) stce_10167;
        stce_10138 *stce_9823 = new stce_10138();
        stce_9823->_init_instrument();
        return stce_9823;
      }
      static stce_10138 *create(std::string stce_10168) {
        stce_10138 *stce_9823 = new stce_10138();
        stce_9823->_init_instrument(stce_10168);
        return stce_9823;
      }
      template<class stce_9753, class stce_9877>
      inline void register_variable(dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) {
        _progvarcounter++;
        stce_9877 &data = const_cast<stce_9877 &>(stce_9776._data());
        data.tape_index = _progvarcounter;
        data.stce_10169 = stce_9839;
      }
      template<class stce_9753, class stce_9877>
      inline void register_variable(dco::stce_9847::stce_9864<stce_9753, stce_9877> *stce_9776, DCO_TAPE_INT stce_9962) {
        for (DCO_TAPE_INT stce_9816 = 0; stce_9816 < stce_9962; stce_9816++)
          this->register_variable(stce_9776[stce_9816]);
      }
      template<class stce_9753, class stce_9877>
      inline void register_variable(std::vector<dco::stce_9847::stce_9864<stce_9753, stce_9877> > &stce_9776) {
        register_variable(&(stce_9776[0]), stce_9776.size());
      }
      template<class stce_9753, class stce_9877>
      inline void register_output_variable(dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) {
        stce_9776 = 1 * stce_9776;
      }
      template<class stce_9753, class stce_9877>
      inline void register_output_variable(dco::stce_9847::stce_9864<stce_9753, stce_9877> *stce_9776, const int stce_9962) {
        if (stce_9962 == 0) return;
        for (int stce_9816 = 0; stce_9816 < stce_9962; ++stce_9816)
          stce_9776[stce_9816] = 1 * stce_9776[stce_9816];
      }
      template<class stce_9753, class stce_9877>
      inline void register_output_variable(std::vector<dco::stce_9847::stce_9864<stce_9753, stce_9877> > &stce_9776) {
        register_output_variable(&(stce_9776[0]), stce_9776.size());
      }
      inline void _init_instrument(const std::string &stce_10168 = "") {
        stce_9839 = 0;
        std::string stce_10170 = stce_10168;
        if (stce_10168.size() != 0) {
          stce_10170 += "_";
        }
        stce_10157.open((stce_10170 + "nodes.dot").c_str());
        stce_10158.open((stce_10170 + "edges.dot").c_str());
        stce_10157 << "digraph {" << std::endl;
        stce_10159.open((stce_10170 + "nodes.csv").c_str());
        stce_10160.open((stce_10170 + "edges.csv").c_str());
        stce_10161.open((stce_10170 + "ext_nodes.csv").c_str());
        stce_10162.open((stce_10170 + "ext_edges.csv").c_str());
        stce_10137 = true;
        std::string name = "ROOT";
        std::string stce_10070 = "caller";
        stce_10171(name, stce_10070);
      }
      inline void _finish_instrument() {
        std::string name = "ROOT";
        std::string stce_10070 = "caller";
        stce_10172(name, stce_10070);
        for (size_t stce_9816 = 0; stce_9816 < stce_10164.size(); ++stce_9816) {
          stce_10141 *stce_10106 = stce_10164[stce_9816];
          stce_10157 << stce_10106->stce_10142 << "[shape=box,label=\"" << stce_10106->stce_10143 << "("
                    << stce_10106->stce_10145 << "," << stce_10106->stce_10147 << "," << stce_10106->stce_10148 << ")\"]" << std::endl;
          stce_10159 << stce_10106->stce_10149 << " "
                    << stce_10106->stce_10145 << " "
                    << stce_10106->stce_10150 << " "
                    << stce_10106->stce_10147 << " "
                    << stce_10106->stce_10148 << " "
                    << stce_10106->stce_10143 << std::endl;
          delete stce_10106;
        }
        stce_10164.clear();
        stce_10158 << "}" << std::endl;
        stce_10157.close();
        stce_10158.close();
        stce_10159.close();
        stce_10160.close();
        stce_10161.close();
        stce_10162.close();
        stce_10137 = false;
      }
      inline position_t get_position() {
        return position_t(_progvarcounter, _stackcounter);
      }
      inline void interpret_adjoint() { }
      inline void interpret_adjoint_to(position_t &stce_10020) {
        (void) stce_10020;
      }
      inline void reset() {
        std::cerr << "dco instrument -- possible error due to reset() call" << std::endl;
      }
      inline void reset_to(position_t &stce_10020) {
        std::cerr << "dco instrument -- possible error due to reset() call" << std::endl;
        (void) stce_10020;
      }
      inline void stce_10171(const std::string &stce_10143 , const std::string &stce_10070 ) {
        (void) stce_10143;
        (void) stce_10070;
        stce_10141 *stce_10106 = new stce_10141(this, stce_10143, stce_10163);
        stce_10164.push_back(stce_10106);
        stce_10163 = stce_10106;
        if (! stce_10165.empty()) {
          stce_10141 *stce_10173 = stce_10165.top();
          DCO_TAPE_INT size = get_position().stce_10139() - stce_10173->stce_10020.stce_10139();
          stce_10158 << stce_10173->stce_10142 << " -> " << stce_10106->stce_10142 << "[label=\"" << size << "\"]" << std::endl;
          stce_10160 << stce_10173->stce_10142 << " " << stce_10106->stce_10142 << " " << size << std::endl;
          stce_10173->stce_10149++;
          stce_10173->stce_10145 += size;
          stce_10173->stce_10146 += size;
          stce_10173->stce_10020 = get_position();
        }
        stce_10165.push(stce_10106);
        stce_10166 = stce_10106->stce_10020.stce_10140();
        stce_10106->stce_10144 = stce_10166;
        stce_10106->stce_10152.start();
      }
      inline void stce_10172(const std::string &stce_10143 , const std::string &stce_10070 ) {
        (void) stce_10143;
        (void) stce_10070;
        stce_10141 *stce_10106 = stce_10165.top();
        stce_10106->stce_10151 = stce_10106->stce_10152.elapsed();
        DCO_TAPE_INT size = get_position().stce_10139() - stce_10106->stce_10020.stce_10139();
        stce_10106->stce_10145 += size;
        stce_10106->stce_10146 += size;
        stce_10165.pop();
        if (!stce_10165.empty()) {
          stce_10141 *stce_10174 = stce_10165.top();
          stce_10174->stce_10020 = get_position();
          stce_10174->stce_10146 += stce_10106->stce_10146;
          stce_10166 = stce_10174->stce_10144;
          stce_10163 = stce_10174;
        }
      }
    };
    template<class stce_9753, stce_10138 *&stce_10175>
    struct stce_10176 {
      stce_9753 stce_10177;
      DCO_TAPE_INT tape_index;
      DCO_TAPE_INT _tape_index;
      DCO_TAPE_INT stce_10169;
      stce_10138::stce_10141 *stce_10070;
      stce_10176 &operator = (const stce_10176 &stce_10006) {
        tape_index = stce_10006.tape_index;
        stce_10169 = stce_10006.stce_10169;
        stce_10070 = stce_10006.stce_10070;
        _tape_index = stce_10006._tape_index;
        return *this;
      }
      stce_10176() : stce_10177(0.0), tape_index(0), _tape_index(0), stce_10169(0), stce_10070(0) {
        if (stce_10175)
          stce_10169 = stce_10175->stce_9839;
      }
      inline const stce_9753 &get_derivative() const {
        return stce_10177;
      }
      inline stce_9753 &get_derivative() {
        return stce_10177;
      }
      inline void clear() {
        tape_index = 0;
        stce_10169 = 0;
      }
      inline int stce_10111() const {
        return tape_index == 0 ? 0 : 1;
      }
      template<class stce_9877 >
      static inline int stce_10110(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) {
        stce_10176 &data = const_cast<stce_10176 &>(stce_9776._data());
        if (data.tape_index != 0) {
          if (data.stce_10070 != 0) {
            if (stce_10175->stce_10163 != data.stce_10070) {
              data.stce_10070->stce_10148++;
              data.stce_10070 = 0;
            }
          }
          if (data.tape_index <= stce_10175->stce_10166) {
            stce_10138::stce_10141 *stce_10178 = stce_10175->stce_10165.top();
            while (stce_10178) {
              if (data.stce_10169 < stce_10178->stce_10142) {
                stce_10178->stce_10147++;
                stce_10178 = stce_10178->stce_10070;
              } else {
                stce_10178 = NULL;
              }
            }
            data.stce_10169 = stce_10175->stce_10165.top()->stce_10142;
          }
        }
        return stce_9776._data().stce_10111();
      }
      template<class stce_9871, class stce_9872, class stce_9873 >
      static inline int stce_10110(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) {
        return stce_10110(stce_9776.stce_9856) + stce_10110(stce_9776.stce_9857);
      }
      template<class stce_9876, class stce_9873 >
      static inline int stce_10110(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) {
        return stce_10110(stce_9776.stce_9852);
      }
      template<class stce_9871, class stce_9873 >
      static inline int stce_10110(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) {
        return stce_10110(stce_9776.stce_9856);
      }
      template<class stce_9872, class stce_9873 >
      static inline int stce_10110(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) {
        return stce_10110(stce_9776.stce_9857);
      }
      template<class stce_9877 >
      static inline DCO_TAPE_INT stce_10179(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776) {
        (void) stce_9776;
        return 0;
      }
      template<class stce_9871, class stce_9872, class stce_9873 >
      static inline DCO_TAPE_INT stce_10179(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776) {
        return stce_10179(stce_9776.stce_9856) + stce_10179(stce_9776.stce_9857) + 1;
      }
      template<class stce_9876, class stce_9873 >
      static inline DCO_TAPE_INT stce_10179(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776) {
        return stce_10179(stce_9776.stce_9852) + 1;
      }
      template<class stce_9871, class stce_9873 >
      static inline DCO_TAPE_INT stce_10179(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776) {
        return stce_10179(stce_9776.stce_9856) + 1;
      }
      template<class stce_9872, class stce_9873 >
      static inline DCO_TAPE_INT stce_10179(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776) {
        return stce_10179(stce_9776.stce_9857) + 1;
      }
      template<class stce_9906, class stce_9907>
      static inline void stce_9875(const stce_9906 &stce_10006, stce_9907 &stce_10180) {
        int stce_10115 = stce_10110(stce_10006);
        stce_10176 &data = const_cast<stce_10176 &>(stce_10180._data());
        if (stce_10137 && (stce_10175->stce_10163 != NULL)) {
          DCO_TAPE_INT stce_10181 = stce_10179(stce_10006);
          stce_10175->stce_10163->stce_10150 += (stce_10181);
        }
        if (stce_10115 > 0) {
          stce_10175->_stackcounter += (stce_10115 + 1);
          stce_10175->_progvarcounter++;
          data.tape_index = stce_10175->_progvarcounter;
          data.stce_10070 = stce_10175->stce_10163;
        } else {
          data.clear();
        }
        if (NULL != stce_10175 && !stce_10175->is_active()) {
          data.clear();
        }
      }
    };
  }
}
namespace dco {
  namespace stce_9847 {
    template<class stce_9753>
    struct stce_10182 {
    private:
      struct stce_10183 {
        int stce_10115;
        int stce_10184;
      };
      stce_10183 *stce_10185;
      DCO_TAPE_INT stce_10186;
      int *stce_10187;
      DCO_TAPE_INT stce_10188;
      stce_10182(const stce_10182<stce_9753> &stce_10189) {
        (void) stce_10189;
        throw dco::exception::create<std::runtime_error>("dco_error: Not implemented yet! Please report, why needed!", "../build_files//../src/dco//dco_tape_blob_pattern.hpp", 31);
      }
      stce_10182(DCO_TAPE_INT stce_10115, DCO_TAPE_INT stce_10013) {
        stce_10185 = new stce_10183[stce_10013];
        stce_10186 = 0;
        stce_10187 = new int[stce_10115];
        stce_10188 = 0;
      }
    public:
      struct stce_10190 {
        friend struct stce_10182<stce_9753>;
      private:
        DCO_TAPE_INT stce_10191;
        DCO_TAPE_INT stce_10192;
        inline stce_10190(DCO_TAPE_INT stce_10193, DCO_TAPE_INT stce_10194) : stce_10191(stce_10193), stce_10192(stce_10194) {}
      public:
        inline stce_10190() : stce_10191(0), stce_10192(0) {};
        DCO_TAPE_INT stce_10195() {
          return stce_10191;
        }
        DCO_TAPE_INT stce_10196() {
          if (stce_10192 < 0) return -stce_10192;
          return stce_10192;
        }
        bool stce_10197() {
          return stce_10192 < 0;
        }
      };
      struct position_t {
      private:
        DCO_TAPE_INT _progvarcounter;
      public:
        inline DCO_TAPE_INT stce_10013() const {
          return _progvarcounter;
        }
        inline position_t(const DCO_TAPE_INT stce_10198) : _progvarcounter(stce_10198) {}
      };
      inline position_t get_position() {
        return position_t(stce_10186);
      }
      typedef std::vector<stce_10190> stce_10199;
      template<class stce_9774>
      inline stce_10199 *stce_10200(stce_9774 *stce_10195, int stce_9962, const position_t &stce_10201) {
        stce_10199 *stce_9823 = new stce_10199();
        for (DCO_TAPE_INT stce_9816 = 0; stce_9816 < stce_9962; ++stce_9816) {
          stce_10202(stce_9816 + 1, stce_10195[stce_9816]._data().tape_index, stce_10201, stce_9823);
        }
        return stce_9823;
      }
      inline void stce_10203(stce_10199 *stce_10204, std::string filename) {
        std::ofstream out(filename.c_str());
        for (size_t stce_9816 = 0; stce_9816 < stce_10204->size(); ++stce_9816) {
          stce_10190 &stce_10205 = (*stce_10204)[stce_9816];
          out << stce_10205.stce_10195() << " " << stce_10205.stce_10196() << " 1" << std::endl;
        }
        out.close();
      }
      inline void stce_10206(std::string filename) {
        std::ofstream out(filename.c_str());
        out << "digraph {" << std::endl;
        for (DCO_TAPE_INT stce_9816 = 1; stce_9816 <= stce_10186; ++stce_9816) {
          out << stce_9816 << std::endl;
        }
        for (DCO_TAPE_INT stce_9816 = 1; stce_9816 <= stce_10186; ++stce_9816) {
          int stce_10115 = stce_10185[stce_9816].stce_10115;
          int stce_10099 = stce_10185[stce_9816].stce_10184;
          for (int stce_10131 = 0; stce_10131 < stce_10115; ++stce_10131) {
            int stce_9908 = stce_10187[stce_10131 + stce_10099];
            out << stce_9816 << " -> " << stce_9908 << std::endl;
          }
        }
        out << "}" << std::endl;
        out.close();
      }
      inline void stce_10202(DCO_TAPE_INT stce_10193, DCO_TAPE_INT stce_9839, const position_t &stce_10201, stce_10199 *stce_10207) {
        if (stce_9839 == 0) return;
        if (stce_9839 <= stce_10201.stce_10013()) {
          stce_10207->push_back(stce_10190(stce_10193, stce_9839));
        } else {
          int stce_10115 = stce_10185[stce_9839].stce_10115;
          int stce_10099 = stce_10185[stce_9839].stce_10184;
          for (int stce_9816 = 0; stce_9816 < stce_10115; ++stce_9816) {
            stce_10202(stce_10193, stce_10187[stce_9816 + stce_10099], stce_10201, stce_10207);
          }
        }
      }
      static inline stce_10182 *create(DCO_TAPE_INT size, DCO_TAPE_INT stce_10167 = 0) {
        if (stce_10167 == 0) stce_10167 = size / 2;
        return new stce_10182(size, stce_10167);
      }
      template<class stce_9877 >
      inline void register_variable(dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_10208) {
        stce_9877 &data = const_cast<stce_9877 &>(stce_10208._data());
        stce_10186++;
        data.tape_index = stce_10186;
      }
      template<stce_10182 *&global_tape>
      struct stce_10209 {
        DCO_TAPE_INT tape_index;
        stce_10209() : tape_index(0) {}
        inline void clear() {
          tape_index = 0;
        }
        template<class stce_9877 >
        static inline void stce_10116(const dco::stce_9847::stce_9864<stce_9753, stce_9877> &stce_9776, bool stce_10197) {
          (void) stce_10197;
          global_tape->stce_10187[global_tape->stce_10188] = stce_9776._data().tape_index;
          global_tape->stce_10188++;
        }
        template<class stce_9871, class stce_9872, class stce_9873 >
        static inline void stce_10116(const dco::stce_9847::stce_9855<stce_9753, stce_9871, stce_9872, stce_9873> &stce_9776, bool stce_10197) {
          stce_10116(stce_9776.stce_9856, stce_10197);
          stce_10116(stce_9776.stce_9857, stce_10197);
        }
        template<class stce_9876, class stce_9873 >
        static inline void stce_10116(const dco::stce_9847::stce_9850<stce_9753, stce_9876, stce_9873> &stce_9776, bool stce_10197) {
          stce_10116(stce_9776.stce_9852, stce_10197);
        }
        template<class stce_9871, class stce_9873 >
        static inline void stce_10116(const dco::stce_9847::stce_9860<stce_9753, stce_9871, stce_9873> &stce_9776, bool stce_10197) {
          stce_10116(stce_9776.stce_9856, stce_10197);
        }
        template<class stce_9872, class stce_9873 >
        static inline void stce_10116(const dco::stce_9847::stce_9861<stce_9753, stce_9872, stce_9873> &stce_9776, bool stce_10197) {
          stce_10116(stce_9776.stce_9857, stce_10197);
        }
        template<class stce_9906, class stce_9907>
        static inline void stce_9875(const stce_9906 &stce_10006, stce_9907 &stce_10180) {
          const int stce_10184 = global_tape->stce_10188;
          stce_10116(stce_10006, false);
          stce_10209 &data = const_cast<stce_10209 &>(stce_10180._data());
          if (stce_10184 == global_tape->stce_10188) {
            data.clear();
          } else {
            global_tape->stce_10186++;
            data.tape_index = global_tape->stce_10186;
            global_tape->stce_10185[global_tape->stce_10186].stce_10115 = global_tape->stce_10188 - stce_10184;
            global_tape->stce_10185[global_tape->stce_10186].stce_10184 = stce_10184;
          }
        }
      };
    };
  }
}
namespace dco {
  namespace instrument {
    typedef dco::instrument::stce_10138 tape_t;
    extern tape_t *global_tape;
    typedef dco::instrument::stce_10176<double, global_tape> data;
    typedef dco::stce_9847::stce_9864<double, data> type;
    typedef dco::stce_9847::tape_options tape_options_t;
    typedef dco::helper::stce_9967<type, tape_t> external_adjoint_object_t;
  }
namespace helper {
  template<>
  class stce_9953<instrument::type, instrument::tape_t> : public instrument::tape_t::stce_10066 {
  private:
    class stce_9954 {
    public:
      virtual ~stce_9954() {};
    };
    template <typename stce_9955>
    class stce_9959 : public stce_9954 {
    public:
      stce_9955 _data;
      stce_9959(stce_9955 data) : _data(data) {}
      virtual ~stce_9959() { }
    };
    template <typename stce_9955>
    class stce_9960 : public stce_9954 {
    public:
      stce_9955 *_data;
      const int stce_9961;
      stce_9960(const stce_9955 *data, int stce_9962) : _data(new stce_9955[stce_9962]), stce_9961(stce_9962) {
        for (int stce_9816 = 0; stce_9816 < stce_9962; ++stce_9816)
          _data[stce_9816] = data[stce_9816];
      }
      stce_9960(const stce_9955 *data, const int stce_9963, const int stce_9962) : _data(new stce_9955[stce_9962]), stce_9961(stce_9962) {
        for (int stce_9816 = 0, stce_9817 = 0; stce_9816 < stce_9962; ++stce_9816, stce_9817 += stce_9963)
          _data[stce_9816] = data[stce_9817];
      }
      virtual ~stce_9960() {
        delete [] _data;
      }
    };
    unsigned int stce_9964;
    std::vector<stce_9954 *> stce_9965;
  protected:
    virtual ~stce_9953() {
      for (unsigned int stce_9816 = 0; stce_9816 < stce_9965.size(); stce_9816++)
        delete stce_9965[stce_9816];
    }
  public:
    stce_9953(): stce_9964(0) {}
    template<typename stce_9955>
    inline void write_data(const stce_9955 &stce_9966) {
      stce_9965.push_back(new stce_9959<stce_9955>(stce_9966));
    }
    template<typename stce_9955>
    inline void write_data(const stce_9955 *const stce_9966, const int stce_9962) {
      stce_9965.push_back(new stce_9960<stce_9955>(stce_9966, stce_9962));
    }
    template<typename stce_9955>
    inline void write_data(const stce_9955 *const &stce_9966, const int stce_9963, const int stce_9962) {
      stce_9965.push_back(new stce_9960<stce_9955>(stce_9966, stce_9963, stce_9962));
    }
    template<typename stce_9955>
    inline void read_data(stce_9955 &stce_9966) {
      stce_9966 = static_cast<stce_9959<stce_9955>* >(stce_9965[stce_9964])->_data;
      ++stce_9964;
      if (stce_9964 == stce_9965.size()) stce_9964 = 0;
    }
    template<typename stce_9955>
    inline void read_data(stce_9955 *&stce_9966, const int stce_9962) {
      if (stce_9966 == NULL) stce_9966 = new stce_9955[stce_9962];
      stce_9955 *data = static_cast<stce_9960<stce_9955>*>(stce_9965[stce_9964])->_data;
      for (int stce_9816 = 0; stce_9816 < stce_9962; stce_9816++) {
        stce_9966[stce_9816] = data[stce_9816];
      }
      stce_9964++;
      if (stce_9964 == stce_9965.size()) stce_9964 = 0;
    }
  };
  template<>
  class stce_9967<instrument::type, instrument::tape_t> : public stce_9953<instrument::type, instrument::tape_t> {
  private:
  public:
    stce_9967(): stce_9953<instrument::type, instrument::tape_t>() {}
    ~stce_9967() { }
    inline instrument::type::VALUE_TYPE register_input(const instrument::type &stce_9776) {
      return stce_9776._value();
    }
    inline void register_input(const instrument::type *const stce_9776, instrument::type::VALUE_TYPE *stce_9973, const int stce_9962) {
      int stce_9816;
      for (stce_9816 = 0; stce_9816 < stce_9962; ++stce_9816) {
        stce_9973[stce_9816] = stce_9776[stce_9816]._value();
      }
    }
    DEPRECATED inline void register_outputs(instrument::tape_t *tape, const instrument::type::VALUE_TYPE *const stce_9981, instrument::type *stce_9976, const int stce_9962) {
      (void) tape;
      register_output(stce_9981, stce_9976, stce_9962);
    }
    inline void register_output(const instrument::type::VALUE_TYPE *const stce_9981, instrument::type *stce_9976, const int stce_9962) {
      for (int stce_9816 = 0; stce_9816 < stce_9962; ++stce_9816) {
        stce_9976[stce_9816] = stce_9981[stce_9816];
        instrument::global_tape->register_variable(stce_9976[stce_9816]);
      }
    }
    inline instrument::type register_output(const instrument::type::VALUE_TYPE &stce_9982) {
      instrument::type stce_9983;
      stce_9983 = stce_9982;
      instrument::global_tape->register_variable(stce_9983);
      return stce_9983;
    }
    inline instrument::type::VALUE_TYPE get_output_adjoint() {
      instrument::type::VALUE_TYPE back = 0;
      return back;
    }
    inline void get_output_adjoint(instrument::type::VALUE_TYPE *stce_9985, const int stce_9962) {
      for (int stce_9816 = 0; stce_9816 < stce_9962; ++stce_9816) {
        stce_9985[stce_9816] = 0;
      }
    }
    inline void increment_input_adjoint(const instrument::type::VALUE_TYPE *const stce_9986, const int stce_9962) {
      (void) stce_9986;
      (void) stce_9962;
    }
    inline void increment_input_adjoint(const instrument::type::VALUE_TYPE &stce_9986) {
      (void) stce_9986;
    }
  };
}
  namespace p1t {
    typedef dco::stce_9847::stce_10182<double> tape_t;
    extern tape_t *global_tape;
    typedef tape_t::stce_10209<global_tape> data;
    typedef dco::stce_9847::stce_9864<double, data> type;
    typedef dco::stce_9847::tape_options tape_options_t;
  }
  namespace p1f {
    typedef dco::stce_9847::stce_9925<DCO_P1F_SIZE, double> data;
    typedef dco::stce_9847::stce_9864<double, data> type;
  }
  namespace p2f_a1s {
    typedef dco::stce_9847::stce_9944<dco::p1f::type> tape_t;
    extern tape_t *global_tape;
    typedef tape_t::stce_10117<global_tape> data;
    typedef dco::stce_9847::stce_9864<dco::p1f::type, data> type;
    typedef dco::stce_9847::tape_options tape_options_t;
    typedef dco::helper::stce_9967<type, tape_t> external_adjoint_object_t;
  }
  namespace p1f {
    void set(type &stce_9776, const bool stce_9869, const size_t stce_9817) ;
    void get(type &stce_9776, bool &stce_9869, const size_t stce_9817) ;
    void get(type &stce_9776, double &stce_9869) ;
    std::string stce_10210(const type &stce_9776) ;
  }
  namespace p1t {
    void set(type &stce_9776, const double stce_9869) ;
    void get(type &stce_9776, double &stce_9869) ;
  }
  namespace p2f_a1s {
    void set(type &stce_9776, const bool stce_9869, const size_t stce_9817) ;
    void set(type &stce_9776, const double stce_9869, const int what = 0) ;
    void get(const type &stce_9776, bool &stce_9869, const size_t stce_9817) ;
    void get(const type &stce_9776, double &stce_9869, const int what = 0) ;
  }
  namespace instrument {
    void set(type &stce_9776, const double stce_9869, const int what = 0) ;
    void get(const type &stce_9776, double &stce_9869, const int what = 0) ;
  }
}
namespace dco {
  template <class stce_10211>
  class stce_10212 {
  public:
    typedef stce_10211 value_t;
    typedef void derivative_t;
    typedef void tape_t;
    typedef void local_gradient_t;
    typedef void local_gradient_with_activity_t;
    typedef void external_adjoint_object_t;
    typedef external_adjoint_object_t efo_t;
    static const bool is_dco_type = false;
    static const bool is_adjoint_type = false;
    static const bool is_tangent_type = false;
  };
  template <class stce_9774>
  class gt1s {
  public:
    typedef stce_9774 derivative_t;
    typedef dco::stce_9847::stce_9900<derivative_t> _data;
    typedef dco::stce_9847::stce_9864<stce_9774, _data> type;
    typedef stce_9774 value_t;
    typedef void tape_t;
    typedef void local_gradient_t;
    typedef void local_gradient_with_activity_t;
    typedef void external_adjoint_object_t;
    typedef external_adjoint_object_t efo_t;
    static const bool is_dco_type = true;
    static const bool is_adjoint_type = false;
    static const bool is_tangent_type = true;
    static void get(const type &stce_9776, stce_9774 &stce_9829, int stce_10213 = 0) ;
    static void set(type &stce_9776, const stce_9774 &stce_9829, int stce_10213 = 0) ;
    static void get(const type *stce_9776, stce_9774 *stce_10214, const size_t stce_9962, const int what = 0) ;
    static void get(const std::vector<type> &stce_9776, std::vector<stce_9774> &stce_10214, const int what = 0) ;
    static void set(type *stce_9776, const stce_9774 *stce_9869, const size_t stce_9962, const int what = 0) ;
    static void set(std::vector<type> &stce_9776, const std::vector<stce_9774> &stce_9869, const int what = 0) ;
  };
  template <class stce_9774, typename stce_9901, bool stce_10215> class stce_10216 {
  public:
    typedef dco::stce_9847::stce_9921<stce_9774, stce_9901> _data;
  };
  template <class stce_9774, typename stce_9901> class stce_10216<stce_9774, stce_9901, false> {
  public:
    typedef dco::stce_9847::stce_9919<stce_9774, stce_9901> _data;
  };
  template <class stce_9774, int stce_10217 = DCO_T1V_SIZE, bool stce_10215 = true>
  class gt1v {
  public:
    typedef dco::helper::stce_9811<stce_9774, stce_10217> derivative_t;
    typedef typename stce_10216<stce_9774, derivative_t, stce_10215>::_data _data;
    typedef dco::stce_9847::stce_9864<stce_9774, _data> type;
    typedef stce_9774 value_t;
    typedef void tape_t;
    typedef dco::stce_9847::tape_options tape_options_t;
    typedef void local_gradient_t;
    typedef void local_gradient_with_activity_t;
    typedef void external_adjoint_object_t;
    typedef external_adjoint_object_t efo_t;
    static const bool is_dco_type = true;
    static const bool is_adjoint_type = false;
    static const bool is_tangent_type = true;
    static void get(const type &stce_9776, stce_9774 &stce_9829, int stce_10213 = 0, int stce_9817 = 0) ;
    static void set(type &stce_9776, const stce_9774 &stce_9829, int stce_10213 = 0, int stce_9817 = 0) ;
  };
  template <class stce_9774, const int stce_9820 = DCO_T1V_SIZE>
  class ga1v {
  public:
    typedef dco::helper::stce_9811<stce_9774, stce_9820> derivative_t;
    typedef dco::stce_9847::stce_9944<stce_9774, derivative_t> tape_t;
    static tape_t *global_tape;
    typedef typename dco::ga1v<stce_9774, stce_9820>::tape_t::template stce_10117<global_tape> _data;
    typedef dco::stce_9847::stce_9864<stce_9774, _data> type;
    typedef typename tape_t::stce_10048 local_gradient_t;
    typedef typename tape_t::stce_10056 local_gradient_with_activity_t;
    typedef dco::stce_9847::tape_options tape_options_t;
    typedef dco::helper::stce_9947<tape_t> stce_10066;
    typedef dco::helper::stce_9953<type, tape_t> stce_10218;
    typedef dco::helper::stce_9967<type, tape_t> external_adjoint_object_t;
    typedef external_adjoint_object_t efo_t;
    typedef stce_9774 value_t;
    static const bool is_dco_type = true;
    static const bool is_adjoint_type = true;
    static const bool is_tangent_type = false;
  public:
    static void get(const type &stce_9776, stce_9774 &stce_9829, int stce_10213 = 0, int stce_9817 = 0) {
      if (stce_10213 == -1) {
        _data &stce_10219 = const_cast<_data &>(stce_9776._data());
        stce_9829 = stce_10219._adjoint()[stce_9817];
      } else if (stce_10213 == 0) {
        stce_9829 = stce_9776._value();
      } else
        throw dco::exception::create<std::runtime_error>("wrong component requested.");
    }
    static void set(type &stce_9776, const stce_9774 &stce_9829, int stce_10213 = 0, int stce_9817 = 0) {
      if (stce_10213 == -1) {
        _data &stce_10219 = const_cast<_data &>(stce_9776._data());
        stce_10219._adjoint()[stce_9817] = stce_9829;
      } else if (stce_10213 == 0) {
        stce_9774 &stce_10220 = const_cast<stce_9774 &>(stce_9776._value());
        stce_10220 = stce_9829;
      } else
        throw dco::exception::create<std::runtime_error>("wrong component requested.");
    }
  };
  template <typename stce_9774, const int stce_9820> typename ga1v<stce_9774, stce_9820>::tape_t *ga1v<stce_9774, stce_9820>::global_tape;
  template <class stce_9774>
  class ga1s {
  public:
    typedef stce_9774 derivative_t;
    typedef dco::stce_9847::stce_9944<derivative_t> tape_t;
    static tape_t *global_tape;
    typedef typename tape_t::template stce_10117<global_tape> _data;
    typedef dco::stce_9847::stce_9864<stce_9774, _data> type;
    typedef typename tape_t::stce_10048 local_gradient_t;
    typedef typename tape_t::stce_10056 local_gradient_with_activity_t;
    typedef dco::stce_9847::tape_options tape_options_t;
    typedef dco::helper::stce_9947<tape_t> stce_10066;
    typedef dco::helper::stce_9953<type, tape_t> stce_10218;
    typedef dco::helper::stce_9967<type, tape_t> external_adjoint_object_t;
    typedef external_adjoint_object_t efo_t;
    typedef stce_9774 value_t;
    static const bool is_dco_type = true;
    static const bool is_adjoint_type = true;
    static const bool is_tangent_type = false;
    static void get(const type &stce_9776, stce_9774 &stce_9829, int stce_10213 = 0) ;
    static void get(const type *stce_9776, stce_9774 *stce_10214, const size_t stce_10221, const int what = 0) ;
    static void get(const std::vector<type> &stce_9776, std::vector<stce_9774> &stce_10214, const int what = 0) ;
    static void set(type &stce_9776, const stce_9774 stce_9829, int stce_10213 = 0) ;
    static void set(type *stce_9776, const stce_9774 *stce_9869, const size_t stce_10221, const int what = 0) ;
    static void set(std::vector<type> &stce_9776, const std::vector<stce_9774> &stce_9869, const int what = 0) ;
  };
  template <typename stce_9774> typename ga1s<stce_9774>::tape_t *ga1s<stce_9774>::global_tape;
  template <class stce_9774>
  class ga1sm {
  public:
    typedef stce_9774 derivative_t;
    typedef dco::stce_9847::stce_9944<derivative_t> tape_t;
    typedef typename tape_t::stce_10121 _data;
    typedef dco::stce_9847::stce_9864<stce_9774, _data> type;
    typedef typename tape_t::stce_10048 local_gradient_t;
    typedef typename tape_t::stce_10056 local_gradient_with_activity_t;
    typedef dco::stce_9847::tape_options tape_options_t;
    typedef dco::helper::stce_9947<tape_t> stce_10066;
    typedef dco::helper::stce_9953<type, tape_t> stce_10218;
    typedef dco::helper::stce_9967<type, tape_t> external_adjoint_object_t;
    typedef external_adjoint_object_t efo_t;
    typedef stce_9774 value_t;
    static const bool is_dco_type = true;
    static const bool is_adjoint_type = true;
    static const bool is_tangent_type = false;
    static void get(const type &stce_9776, stce_9774 &stce_9829, int stce_10213 = 0) ;
    static void get(const type *stce_9776, stce_9774 *stce_10214, const size_t stce_9962, const int what = 0) ;
    static void get(const std::vector<type> &stce_9776, std::vector<stce_9774> &stce_10214, const int what = 0) ;
    static void set(type &stce_9776, const stce_9774 stce_9829, int stce_10213 = 0) ;
    static void set(type *stce_9776, const stce_9774 *stce_9869, const size_t stce_9962, const int what = 0) ;
    static void set(std::vector<type> &stce_9776, const std::vector<stce_9774> &stce_9869, const int what = 0) ;
  };
}
namespace dco {
  template<typename tape_t>
  static size_t size_of(const tape_t *tape) {
    return tape->stce_10045();
  }
  template <class stce_10222>
  struct mode : public dco::stce_10212<stce_10222> { };
  template <typename stce_9753>
  struct mode<dco::stce_9847::stce_9864<stce_9753, typename dco::gt1s<stce_9753>::_data> > : public dco::gt1s<stce_9753> {};
  template <typename stce_9753, int stce_10217>
  struct mode<dco::stce_9847::stce_9864<stce_9753, dco::stce_9847::stce_9919<stce_9753, dco::helper::stce_9811<stce_9753, stce_10217> > > > : public dco::gt1v<stce_9753, stce_10217, false> {};
  template <typename stce_9753, int stce_10217>
  struct mode<dco::stce_9847::stce_9864<stce_9753, dco::stce_9847::stce_9921<stce_9753, dco::helper::stce_9811<stce_9753, stce_10217> > > > : public dco::gt1v<stce_9753, stce_10217, true> {};
  template <typename stce_9753>
  struct mode<dco::stce_9847::stce_9864<stce_9753, typename dco::ga1s<stce_9753>::_data> > : public dco::ga1s<stce_9753> {};
  template <typename stce_9753>
  struct mode<dco::stce_9847::stce_9864<stce_9753, typename dco::ga1v<stce_9753>::_data> > : public dco::ga1v<stce_9753> {};
  template <typename stce_9753>
  struct mode<dco::stce_9847::stce_9864<stce_9753, typename dco::ga1sm<stce_9753>::_data> > : public dco::ga1sm<stce_9753> {};
}
namespace dco {
  namespace instrument {
    class instrumentation_data {
      const std::string stce_10223;
      const std::string stce_10224;
      bool stce_10225;
    public:
      instrumentation_data(std::string stce_10226) : stce_10223(stce_10226), stce_10224("caller"), stce_10225(false) {
        if (dco::instrument::stce_10137 && dco::instrument::global_tape) {
          dco::instrument::global_tape->stce_10171(stce_10223, stce_10224);
          stce_10225 = true;
        }
      }
      ~instrumentation_data() {
        if (stce_10225) {
          dco::instrument::global_tape->stce_10172(stce_10223, stce_10224);
        }
      }
    };
    inline void stce_10227(std::string stce_10226) {
      std::string stce_10224 = "caller";
      dco::instrument::global_tape->stce_10171(stce_10226, stce_10224);
    }
    inline void stce_10228(std::string stce_10226) {
      std::string stce_10224 = "caller";
      dco::instrument::global_tape->stce_10172(stce_10226, stce_10224);
    }
  }
}

#ifdef _MSC_VER
#pragma warning( pop )
#endif

#endif // DCO_HPP
